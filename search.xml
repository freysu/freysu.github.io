<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>Hexo 是一个基于 node.js 的博客框架。它简单、强大，支持 Markdown 写作，一键就可以部署到 <a href="https://github.com/">GitHub</a> 或 <a href="https://coding.net/">Coding</a> 平台，瞬间拥有个人博客网站，是程序员、技术宅居家必备利器。同时 Hexo 还有丰富的主题和插件可供定制和扩展，适合有折腾癖好的同学深入探索。</p>
<p>这是一篇极简的使用教程，涉及到 Hexo 安装、配置、部署以及网站备份（方便多地写作更新）等内容。基本满足了想快速上手使用的同学的需求。更详细的使用方法，可以参考 <a href="https://hexo.io/zh-cn/docs/">Hexo 中文文档</a>和 <a href="http://theme-next.iissnan.com/">Hexo Next 主题中文文档</a>。</p>
<h2><span id="安装">安装</span></h2><p>建议在 Linux 系统下安装和使用 Hexo，即便是 Win10 系统，也可以通过安装 Linux 子系统（WLS）方便地使用 Linux 环境。</p>
<p>安装前提</p>
<ul>
<li>git</li>
<li>node.js</li>
</ul>
<p>git 在各 Linux 发行版的仓库中都有，可通过系统的包管理工具安装，以 Ubuntu 为例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></tbody></table></figure>

<p>node.js 需要先安装包管理工具 npm，详细的安装方法可参考 <a href="https://www.npmjs.com.cn/getting-started/installing-node/">npm 中文网</a>。对于 Ubuntu 系统，可使用如下命令安装：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></tbody></table></figure>

<p>安装 Hexo</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="使用">使用</span></h2><h2><span id="建站">建站</span></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo init blog    <span class="comment"># blog 是自己起的目录名</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>完成后，blog 目录下结构如下：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package-lock.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">node_modules(目录)</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds(目录)</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_drafts</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">_posts</span></span><br><span class="line"><span class="string">└──</span> <span class="string">themes(目录)</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>_config.yml</strong></p>
<p>网站配置信息（标题，作者，主题、部署等等）</p>
<p><strong>package.json/package-lock.json</strong></p>
<p>Hexo 是一个 node.js 应用，可以通过 npm 安装各种扩展包，这两个文件就记录了安装的包信息。</p>
<p><strong>node_modules 目录</strong></p>
<p>这个目录中存放通过 npm 安装的包</p>
<p><strong>scaffolds 目录</strong></p>
<p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p><strong>source 目录</strong></p>
<p>这个目录就是用户写文章的地方，_post 目录下存放用户写的 Markdown 文件会被解析成 HTML 并放入 public 文件夹中。</p>
<p><strong>theme 目录</strong></p>
<p>主题文件夹，Hexo 会根据主题来生成不同风格的页面。</p>
<h2><span id="写作">写作</span></h2><h2><span id="新建文章">新建文章</span></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new <span class="string">"Write blog using markdown"</span></span><br><span class="line"><span class="comment"># 或简写为</span></span><br><span class="line">hexo n <span class="string">"Write blog using markdown"</span></span><br></pre></td></tr></tbody></table></figure>

<p>该命令会在 _post 目录下生成文件 write-blog-using-markdown.md。可以在文件开头设置标题，时间、标签，分类等，如下：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">用</span> <span class="string">Markdown</span> <span class="string">写博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-13 09:22:18</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tutorial</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown</span></span><br></pre></td></tr></tbody></table></figure>



<p>接着这部分就是文章的正文，遵循 Markdown 格式。</p>
<h2><span id="生成静态页面">生成静态页面</span></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或简写为</span></span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="启动网站">启动网站</span></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># 或简写为</span></span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>

<p>打开浏览器，在地址栏中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到自己的博客了。本地网站只是方便开发时预览效果，其他人无法通过互联网访问。</p>
<p><em>如果无法显示，可能是 4000 端口被占用了，可以使用如下命令指定端口</em></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo s -p 4444</span><br></pre></td></tr></tbody></table></figure>

<p><em>或者修改 node_modules/hexo-server/index.js 文件，修改默认端口</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">hexo.config.server = assign({</span><br><span class="line">  port: <span class="number">4444</span>,</span><br><span class="line">  log: <span class="literal">false</span>,</span><br><span class="line">  ip: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">  compress: <span class="literal">false</span>,</span><br><span class="line">  header: <span class="literal">true</span></span><br><span class="line">}, hexo.config.server);</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="插入图片">插入图片</span></h2><p>在 _config.yml 开启资源文件夹</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></tbody></table></figure>

<p>这样，在 _posts 目录下会生成一个与文章同名的文件夹。把需要插入到文章中的图片放到该文件夹中，并在写文章时通过如下标签引用即可。</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">{% asset_img &lt;图片名&gt; [图片标题] %}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="部署到-github-或-coding">部署到 Github 或 Coding</span></h2><p>首先在 Github 中新建名为 <a href="http://jia-zhuang.github.io/">http://jia-zhuang.github.io</a> 的项目，这样部署成功后，就可以通过链接 <a href="https://jia-zhuang.github.io/">https://jia-zhuang.github.io</a> 来访问网站了。</p>
<p><em>若是在 Coding 中，项目名应为 <a href="http://jiazhuang.coding.me/">http://jiazhuang.coding.me</a>，网站访问链接为 <a href="http://jiazhuang.coding.me/">http://jiazhuang.coding.me</a></em></p>
<p>安装 hexo-deployer-git</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>

<p>修改 _config.yml 配置</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@git.coding.net:jiazhuang/jiazhuang.coding.me.git</span><br><span class="line">    branch: coding-pages</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:jia-zhuang/jia-zhuang.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></tbody></table></figure>

<p><em>注意：我们这里使用 coding-pages 分支部署网站，把 master 分支留给整个 Hexo 的备份；而Gibhub 个人主页只能使用 master 分支</em></p>
<p>在 Github 和 Coding 中开启 Github pages 和 Coding pages 服务，选择对应分支。</p>
<h2><span id="使用-next-主题">使用 Next 主题</span></h2><p>Hexo 默认的 Landscape 主题不够美观，换成流行的 Next 主题吧！通过对 Next 主题简单的设置，基本可以满足新手所有的需求。</p>
<h2><span id="安装和启用">安装和启用</span></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure>

<p>主题将会被下载到 theme/next 目录下。</p>
<p>在站点配置文件 _config.yml 更换主题：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#theme: landscape    # 注释掉这一行，换成下面</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="配置-next">配置 Next</span></h2><p>Next 主题有自己的配置文件，位于 theme/next/_config.yml，里面有丰富的配置，详细可以参考 <a href="http://theme-next.iissnan.com/">Next中文文档</a>。这里列出几个常用配置。</p>
<h2><span id="更换风格">更换风格</span></h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></tbody></table></figure>

<p>一共有四种风格，可以通过注释来开启和关闭某个风格。</p>
<h2><span id="开启数学公式支持">开启数学公式支持</span></h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="添加邮箱和-github-链接">添加邮箱和 Github 链接</span></h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: "https://github.com/jia-zhuang || github"</span><br><span class="line">  E-Mail: mailto:jiazzzz@qq.com || envelope</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="设置菜单">设置菜单</span></h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br></pre></td></tr></tbody></table></figure>

<p>这样会在主页增加 tags 和 categories 菜单（链接），还需生成相应的页面：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo g page tags</span><br><span class="line">hexo g page categories</span><br></pre></td></tr></tbody></table></figure>

<p>这样会在 source 目录下生成 tags 和 categories 目录。分别打开两个目录中的 index.md，可以修改页面标题，但需要设置 type 字段：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-14 09:13:19</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-14 09:13:19</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="修改头像">修改头像</span></h2><p>将图片放入 theme/next/source/images 目录下，并在 Next 配置文件 theme/next/_config.yml 文件中引用图片：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">avatar: /images/gene.jpg</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="其他资源">其他资源</span></h2><p>除 Next 之外，Hexo 还有非常丰富的主题，可以浏览 <a href="https://hexo.io/themes/">Hexo 官网</a>寻找适合自己口味的主题。</p>
<p>随着博客数量和网站需求的增加，可能需要多种多样的扩展功能，可以在 <a href="https://hexo.io/plugins/">Hexo 官网插件页面</a>找当满足自己需求的插件。</p>
]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>英语学习资源导航页</title>
    <url>/2021/03/15/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%AF%BC%E8%88%AA%E9%A1%B5/</url>
    <content><![CDATA[<ul>
<li><a href="#%E8%8B%B1%E8%AF%AD%E7%BD%91%E7%AB%99"><strong>英语网站</strong></a><ul>
<li><a href="#%E4%B8%AD%E6%96%87%E7%BD%91%E7%AB%99">中文网站</a></li>
<li><a href="#%E8%8B%B1%E6%96%87%E7%BD%91%E7%AB%99">英文网站</a></li>
<li><a href="#%E8%8B%B1%E8%AF%AD%E5%AF%BC%E8%88%AA">英语导航</a></li>
</ul>
</li>
<li><a href="#%E8%8B%B1%E8%AF%AD%E8%B5%84%E6%BA%90"><strong>英语资源</strong></a><ul>
<li><a href="#%E8%8B%B1%E8%AF%AD%E6%B8%B8%E6%88%8F">英语游戏</a></li>
</ul>
</li>
<li><a href="#%E5%8D%95%E8%AF%8D%E8%AF%8D%E6%B1%87"><strong>单词词汇</strong></a></li>
<li><a href="#%E5%90%AC%E5%8A%9B%E5%8F%A3%E8%AF%AD"><strong>听力口语</strong></a><ul>
<li><a href="#%E5%9C%A8%E7%BA%BF%E5%90%AC%E5%8A%9B">在线听力</a></li>
<li><a href="#%E5%8F%A3%E8%AF%AD%E5%8D%9A%E4%B8%BB"><strong>口语博主</strong></a></li>
</ul>
</li>
<li><a href="#%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3"><strong>阅读理解</strong></a><ul>
<li><a href="#%E6%9D%82%E5%BF%97%E5%91%A8%E5%88%8A">杂志周刊</a></li>
<li><a href="#%E8%A5%BF%E6%96%B9%E6%96%B0%E9%97%BB">西方新闻</a></li>
<li><a href="#%E4%B8%AD%E5%9B%BD%E6%96%B0%E9%97%BB">中国新闻</a></li>
<li><a href="#%E8%AF%AD%E6%B3%95%E5%8D%9A%E4%B8%BB"><strong>语法博主</strong></a></li>
</ul>
</li>
<li><a href="#%E5%86%99%E4%BD%9C%E8%AF%8D%E5%85%B8"><strong>写作词典</strong></a><ul>
<li><a href="#%E8%AF%8D%E5%BA%93%E6%9F%A5%E8%AF%A2">词库查询</a></li>
<li><a href="#%E6%90%AD%E9%85%8D%E8%AF%8D%E5%85%B8">搭配词典</a></li>
<li><a href="#%E4%BE%8B%E5%8F%A5%E8%AF%8D%E5%85%B8">例句词典</a></li>
</ul>
</li>
<li><a href="#%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95"><strong>写作语法</strong></a><ul>
<li><a href="#%E8%AF%AD%E6%B3%95%E6%A3%80%E6%B5%8B">语法检测</a></li>
<li><a href="#%E5%86%99%E4%BD%9C%E5%BB%BA%E8%AE%AE">写作建议</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>
<h2><span id="英语网站"><strong>英语网站</strong></span></h2><h3><span id="中文网站">中文网站</span></h3><table>
<thead>
<tr>
<th><a href="https://www.hjenglish.com/">沪江英语</a></th>
<th><a href="https://www.shanbay.com/">扇贝</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.i21st.cn/">21英语</a></td>
<td><a href="http://yingyu.xdf.cn/">新东方英语</a></td>
</tr>
<tr>
<td><a href="http://www.bigear.cn/">大耳朵英语</a></td>
<td><a href="http://www.wwenglish.org/index.htm">旺旺英语</a></td>
</tr>
<tr>
<td><a href="https://www.24en.com/">爱思英语</a></td>
<td><a href="https://www.xiao84.com/">巴士英语网</a></td>
</tr>
<tr>
<td><a href="https://language.chinadaily.com.cn/">英语点津</a></td>
<td><a href="http://www.dioenglish.com/wiki/">英语百科</a></td>
</tr>
<tr>
<td><a href="http://www.kekenet.com/hangye/">可可行业英语</a></td>
<td><a href="https://www.24en.com/esp/">爱思行业英语</a></td>
</tr>
<tr>
<td><a href="https://bbs.fobshanghai.com/forumdisplay.php?fid=47&amp;sid=kNS8PJ">福步外贸英语</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="英文网站">英文网站</span></h3><table>
<thead>
<tr>
<th><a href="https://www.engvid.com/">engVid</a></th>
<th><a href="https://www.mmmenglish.com/">mmmEnglish</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.englishclub.com/">EnglishClub</a></td>
<td><a href="http://www.world-english.org/">World English</a></td>
</tr>
<tr>
<td><a href="http://www.manythings.org/">ManyThings</a></td>
<td><a href="https://www.learnenglish.de/">Learn English</a></td>
</tr>
<tr>
<td><a href="https://www.englisch-hilfen.de/en/">English Hilfen</a></td>
<td><a href="http://www.perfectyourenglish.com/index.htm">PerfectYourEnglish</a></td>
</tr>
<tr>
<td><a href="https://www.thoughtco.com/esl-4133095">ThoughtCo.</a></td>
<td><a href="https://english.stackexchange.com/">English Stackexchange</a></td>
</tr>
</tbody></table>
<h3><span id="英语导航">英语导航</span></h3><table>
<thead>
<tr>
<th><a href="http://www.up-6.com/">英语学习导航</a></th>
<th><a href="http://www.yywz123.com/">英语学习网站大全</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.dioenglish.com/diolinks/">英语网址导航</a></td>
<td><a href="http://www.eol.cn/html/en/daohang/index.shtml">外语学习导航</a></td>
</tr>
</tbody></table>
<!-- more -->

<h2><span id="英语资源"><strong>英语资源</strong></span></h2><table>
<thead>
<tr>
<th><a href="https://www.pdawiki.com/forum/forum-92-1.html">PDAWIKI 学习交流区</a></th>
<th><a href="https://www.pdawiki.com/forum/forum-105-1.html">PDAWIKI 学习资源区</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.pdawiki.com/forum/forum-4-1.html">PDAWIKI 词库资源区</a></td>
<td><a href="https://freemdict.com/">FreeMdict</a></td>
</tr>
<tr>
<td><a href="http://yingyu.bbs.kaoyan.com/">英语考研论坛</a></td>
<td><a href="https://www.lxwc.com.cn/topic-55-1.html">两小无猜儿童英语</a></td>
</tr>
<tr>
<td><a href="https://www.tjxz.cc/">田间小站</a></td>
<td><a href="https://www.i-bei.com/baby/thread-66369-1-1.html">牛津阅读树</a></td>
</tr>
<tr>
<td><a href="http://www.eol.cn/html/en/picen001/index.shtml">《图解英语》</a></td>
<td><a href="http://www.dogwood.com.cn/">新东方图书网</a></td>
</tr>
<tr>
<td><a href="https://ienglish521.com/">力哥爱英语</a></td>
<td><a href="https://babynames.net/">BellyBallot 英文起名网站</a></td>
</tr>
<tr>
<td><a href="https://disk.lijie.org/gglog/%E8%A7%86%E9%A2%91/%E6%95%99%E7%A8%8B/%E8%8B%B1%E8%AF%AD/">视频/教程/英语网盘</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="英语游戏">英语游戏</span></h3><table>
<thead>
<tr>
<th><a href="https://quizlet.com/zh-cn">单词卡 | Quizlet</a></th>
<th><a href="https://babadum.com/">看图学单词 | Ba Ba Dum</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.ratatype.com/">英文打字练习 | Ratatype</a></td>
<td><a href="https://zty.pe/">英文打字练习 | ZType</a></td>
</tr>
<tr>
<td><a href="https://www.purposegames.com/">PurposeGames</a></td>
<td><a href="https://qwerty-learner.vercel.app/">Qwerty Learner</a></td>
</tr>
<tr>
<td><a href="https://www.youtube.com/c/Langfocus/videos">Langfocus</a></td>
<td><a href="https://www.youtube.com/user/Xidnaf/videos">Xidnaf</a></td>
</tr>
</tbody></table>
<h2><span id="单词词汇"><strong>单词词汇</strong></span></h2><table>
<thead>
<tr>
<th><a href="https://www.cipindanci.com/">词频背单词</a></th>
<th><a href="https://bdc2.youzack.com/Recitation/Home">YouZack背单词</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://testyourvocab.com/">Test Your Vocabulary</a></td>
<td><a href="https://www.languageguide.org/%E8%8B%B1%E8%AF%AD/%E8%AF%8D%E6%B1%87/">LanguageGuide.org</a></td>
</tr>
<tr>
<td><a href="https://www.engrish.com/">Engrish 英语错用收集</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.usingenglish.com/">UsingEnglish.com</a></td>
<td><a href="https://www.englishpage.com/">English Pages</a></td>
</tr>
<tr>
<td><a href="https://www.myenglishpages.com/">My English Pages</a></td>
<td></td>
</tr>
</tbody></table>
<h2><span id="听力口语"><strong>听力口语</strong></span></h2><h3><span id="在线听力">在线听力</span></h3><table>
<thead>
<tr>
<th><a href="http://www.tingroom.com/">在线英语听力室</a></th>
<th><a href="http://dict.eudic.net/ting">每日英语听力</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.putclub.com/">普特听力</a></td>
<td><a href="http://www.tingclass.net/">听力课堂</a></td>
</tr>
<tr>
<td><a href="http://www.kekenet.com/">可可英语</a></td>
<td></td>
</tr>
<tr>
<td><a href="http://yinbiao.tingclass.net/show-16-9-1.html">48个英语音标表</a></td>
<td><a href="http://www.hydcd.com/baike/yingyuyinbiao.htm">48个国际音标发音表</a></td>
</tr>
<tr>
<td><a href="https://www.youzack.com/">英语听力逐句精听</a></td>
<td><a href="https://www.listeningexpress.com/">听力特快</a></td>
</tr>
<tr>
<td><a href="https://youglish.com/">Youglish</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.listeningexpress.com/cnn10/">CNN10 Student News</a></td>
<td><a href="https://www.51voa.com/">51VOA</a></td>
</tr>
<tr>
<td><a href="http://www.tingvoa.com/">VOA英语学习网</a></td>
<td><a href="http://mini-ielts.com/">在线雅思机考模拟</a></td>
</tr>
</tbody></table>
<h3><span id="口语博主"><strong>口语博主</strong></span></h3><table>
<thead>
<tr>
<th><a href="https://space.bilibili.com/407282397/video">EnglishTube</a></th>
<th><a href="https://space.bilibili.com/24801003/video">口语老炮儿马思瑞</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://space.bilibili.com/340223423/video">Ella教美语</a></td>
<td><a href="https://space.bilibili.com/131058159/video">英语老师Lee</a></td>
</tr>
<tr>
<td><a href="https://space.bilibili.com/30145454/video">阿曾曾儿</a></td>
<td><a href="https://space.bilibili.com/346396741/video">FanfaniShare</a></td>
</tr>
<tr>
<td><a href="https://space.bilibili.com/433248184/video">一起暴击口语</a></td>
<td><a href="https://space.bilibili.com/17996988/video">免子队长油百万</a></td>
</tr>
<tr>
<td><a href="https://space.bilibili.com/20420581/video">EngVid</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.youtube.com/c/engvidEmma/videos">EngVid</a></td>
<td><a href="https://www.youtube.com/c/EnglishLikeANative/videos">English Like A Native</a></td>
</tr>
<tr>
<td><a href="https://www.youtube.com/c/rachelsenglish/videos">Rachel’s English</a></td>
<td><a href="https://www.youtube.com/c/EnglishwithLucy/videos">English with Lucy</a></td>
</tr>
<tr>
<td><a href="https://www.youtube.com/c/mmmEnglish_Emma/videos">mmmEnglish</a></td>
<td><a href="https://www.youtube.com/c/MaaaxterEnglish/videos">Maaaxter English</a></td>
</tr>
<tr>
<td><a href="https://www.youtube.com/c/SoundsAmerican/videos">Sounds American</a></td>
<td><a href="https://www.youtube.com/c/JackiesEnglishClass/videos">跟洋妞学英语 Jackie</a></td>
</tr>
</tbody></table>
<h2><span id="阅读理解"><strong>阅读理解</strong></span></h2><h3><span id="杂志周刊">杂志周刊</span></h3><table>
<thead>
<tr>
<th><a href="https://time.com/">TIME</a></th>
<th><a href="https://www.economist.com/">The Economist</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/nailperry-zd/The-Economist">The Economist 下载</a></td>
<td><a href="https://www.discover.com/">Discover</a></td>
</tr>
<tr>
<td><a href="https://www.newsweek.com/">Newsweek</a></td>
<td><a href="https://www.rd.com/">Reader’s Digest</a></td>
</tr>
</tbody></table>
<h3><span id="西方新闻">西方新闻</span></h3><table>
<thead>
<tr>
<th><a href="https://edition.cnn.com/">CNN</a></th>
<th><a href="https://www.usatoday.com/">USA TODAY</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.washingtonpost.com/">Washington Post</a></td>
<td><a href="https://www.nytimes.com/">New York Times</a></td>
</tr>
<tr>
<td><a href="https://www.latimes.com/">Los Angeles Times</a></td>
<td><a href="https://www.bbc.com/">BBC</a></td>
</tr>
<tr>
<td><a href="https://www.theguardian.com/international">The Guardian</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="中国新闻">中国新闻</span></h3><table>
<thead>
<tr>
<th><a href="http://www.chinadaily.com.cn/">China Daily</a></th>
<th><a href="http://en.people.cn/home.html">People’s Daily Online</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.qcenglish.com/">七彩英语</a></td>
<td><a href="http://www.enread.com/">英文阅读网</a></td>
</tr>
<tr>
<td><a href="http://www.kekenet.com/read/">可可双语阅读</a></td>
<td><a href="http://www.qqenglish.com/">蛐蛐英语</a></td>
</tr>
<tr>
<td><a href="https://zhuanlan.zhihu.com/p/31557166">21个英语新闻网站</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="语法博主"><strong>语法博主</strong></span></h3><table>
<thead>
<tr>
<th align="left"><a href="https://space.bilibili.com/401727458/video">张富贵的英语世界</a></th>
<th align="left"><a href="https://space.bilibili.com/224437180/video">rio老师</a></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://space.bilibili.com/402370368/video">Mmxgxg</a></td>
<td align="left"><a href="https://space.bilibili.com/99574633/video">KMF考满分</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/Englishwithjennifer/videos#0">JenniferESL</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://www.youtube.com/c/engvidJames/videos">JamesESL English Lessons</a></td>
<td align="left"><a href="https://www.youtube.com/c/engvidRonnie/videos">EnglishLessons4U</a></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/Dictionaryphile/All_Dictionaries">宇宙最全在线词典网站导航</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/Dictionaryphile/1000_Eng_Dicts">1000 部英语类词典名录</a></td>
<td align="left"><a href="https://zhuanlan.zhihu.com/51xiaochu">51xiaochu雅思写作</a></td>
</tr>
<tr>
<td align="left"><a href="https://zhuanlan.zhihu.com/talk-about-english">魏剑峰</a></td>
<td align="left"><a href="https://zhuanlan.zhihu.com/miaomianba">妙面爸英语</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.jianshu.com/users/e652ef294319/timeline">超级莎 – 简书</a></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2><span id="写作词典"><strong>写作词典</strong></span></h2><h3><span id="词库查询">词库查询</span></h3><table>
<thead>
<tr>
<th><a href="https://www.wordnik.com/">Wordnik</a></th>
<th><a href="https://www.collinsdictionary.com/dictionary/english-thesaurus">Collins Thesaurus</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.powerthesaurus.org/">PowerThesaurus</a></td>
<td><a href="https://www.words-to-use.com/">Words to Use</a></td>
</tr>
<tr>
<td><a href="https://www.thesaurus.com/">Thesaurus.com</a></td>
<td><a href="https://www.freethesaurus.com/">FreeThesaurus</a></td>
</tr>
<tr>
<td><a href="https://words.bighugelabs.com/">Big Huge Thesaurus</a></td>
<td><a href="https://www.wordhippo.com/">WordHippo</a></td>
</tr>
<tr>
<td><a href="https://visuwords.com/">VisuWords</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="搭配词典">搭配词典</span></h3><table>
<thead>
<tr>
<th><a href="http://www.freecollocation.com/">Collocation Dictionary ▲</a></th>
<th><a href="http://ozdic.com/">Ozdic.com</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.just-the-word.com/">Just the Word</a></td>
<td><a href="https://linggle.com/">Linggle</a></td>
</tr>
<tr>
<td><a href="https://netspeak.org/">Netspeak ▲</a></td>
<td><a href="https://textranch.com/sentence-checker/">TextRanch</a></td>
</tr>
</tbody></table>
<h3><span id="例句词典">例句词典</span></h3><table>
<thead>
<tr>
<th><a href="http://www.jukuu.com/">句库</a></th>
<th><a href="https://sentencedict.com/">SentenceDict</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.linguee.com/">Linguee</a></td>
<td><a href="https://ludwig.guru/">Ludwig</a></td>
</tr>
<tr>
<td><a href="https://www.english-corpora.org/coca/">语料库 | COCA</a></td>
<td><a href="https://www.english-corpora.org/bnc/">语料库 | BNC</a></td>
</tr>
<tr>
<td><a href="http://www.webcorp.org.uk/live/index.jsp">语料库 | WebCorp</a></td>
<td><a href="https://www.azquotes.com/">名人语录 | A-Z Quotes</a></td>
</tr>
</tbody></table>
<h2><span id="写作语法"><strong>写作语法</strong></span></h2><h3><span id="语法检测">语法检测</span></h3><table>
<thead>
<tr>
<th><a href="http://www.wwenglish.org/en/z/grammar/index.htm">旺旺英语语法</a></th>
<th><a href="https://www.grammarly.com/grammar-check">Grammarly</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.languagetool.org/">LanguageTool</a></td>
<td><a href="http://www.1checker.com/OnlineChecker">易改</a></td>
</tr>
<tr>
<td><a href="https://www.nounplus.net/grammarcheck/">NounPlus</a></td>
<td><a href="https://grammica.com/">GrammarChecker</a></td>
</tr>
<tr>
<td><a href="https://hemingwayapp.com/">Hemingway Editor</a></td>
<td><a href="https://app.mtutor.engkoo.com/englishwriting/">Aim Writing</a></td>
</tr>
<tr>
<td><a href="https://wordcounter.net/">WordCounter</a></td>
<td></td>
</tr>
</tbody></table>
<h3><span id="写作建议">写作建议</span></h3><table>
<thead>
<tr>
<th><a href="http://www.1checker.com/Templates">英文写作模版</a></th>
<th><a href="https://www.adreep.cn/">英语作文网</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.writeexpress.com/">英语写作模板</a></td>
<td><a href="https://guinlist.wordpress.com/">guinlist</a></td>
</tr>
<tr>
<td><a href="https://www.powa.org/">Paradigm</a></td>
<td><a href="https://www.squibler.io/writing-prompts">Squibler 写作工具</a></td>
</tr>
<tr>
<td><a href="https://www.writersdigest.com/">Writer’s Digest 写作文摘</a></td>
<td><a href="https://grammica.com/paraphrasing-tool/">Grammica 伪原创工具</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语资源</tag>
        <tag>英语专业</tag>
        <tag>英语网站</tag>
      </tags>
  </entry>
  <entry>
    <title>2019恋词 - Unit 1</title>
    <url>/2021/07/24/2019-love-word-Unit-1/</url>
    <content><![CDATA[<ul>
<li><a href="#1-economy">1. economy</a></li>
<li><a href="#2-echo">2. echo</a></li>
<li><a href="#3-part">3. part</a></li>
<li><a href="#4-apart">4. apart</a></li>
<li><a href="#5-participate">5. participate</a></li>
<li><a href="#6-counterpart">6. ⭐counterpart</a></li>
<li><a href="#7-depart">7. depart</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="1-economy">1. economy</span></h2><p>n. 经济，经济体制；节俭，节约</p>
<h4><span id="词根词缀">词根词缀</span></h4><p><strong>eco- (生态，生态的) + nom- (rule, managing)</strong></p>
<p>e.g. : autonomy 自治；自治权</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2017-12 选词填空）</p>
<p>Now, <em><strong>Africa’s largest economy</strong></em>（非洲最大的经济体） is facing a food crisis as major tomato fields have been destroyed by an insect, leading to a nationwide shortage and escalating prices.</p>
<table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>food crisis</td>
<td>食物危机</td>
<td>organism</td>
<td>有机物，生物体</td>
</tr>
<tr>
<td>GM(genetically modified)</td>
<td>转基因 or 基因改造</td>
<td>micro-organism</td>
<td>微生物</td>
</tr>
<tr>
<td>GMO(Genetically Modified Organism)</td>
<td>基因改造生物</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>economic</td>
<td align="left">adj. 经济的，经济上的；<br>有利可图的，赚钱的</td>
<td>economics</td>
<td>n. 经济学；经济体制</td>
</tr>
<tr>
<td>economical</td>
<td align="left">adj. 经济的；省钱的；节俭的</td>
<td>economist</td>
<td>n. 经济学家</td>
</tr>
</tbody></table>
<h4><span id="形近词">形近词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>ecology</td>
<td>n. 生态学；生态（环境）；生态系统</td>
</tr>
</tbody></table>
<h6><span id="词根词缀">词根词缀：</span></h6><p>-ology (学科) </p>
<h5><span id="派生词">派生词</span></h5><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>ecological</td>
<td>adj. 生态的；生态学的；生态保护的</td>
</tr>
<tr>
<td>ecosystem</td>
<td>n. 生态系统</td>
</tr>
</tbody></table>
<h2><span id="2-echo">2. echo</span></h2><p>n. 回声；附和</p>
<p>v. 发出回声，产生回响；附和</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2007-12 阅读）v. 附和</p>
<p>Wilbur Ross Jr. has <em>echoed</em> Zuckerman’s anger over the bitter struggles faced by middle-class Americans.</p>
<h2><span id="3-part">3. part</span></h2><p>n. 部分；片段；零件；角色；作用；参与</p>
<p>adv. 部分地</p>
<p>v. （使）分开</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>partial</strong></td>
<td><strong>adj. 局部地；偏爱的</strong></td>
<td><strong>impartial</strong></td>
<td><strong>adj. 公正的；不偏不倚的；中立的</strong></td>
</tr>
<tr>
<td>partially</td>
<td>adj. 不完全地</td>
<td>partly</td>
<td>adv. 某种程度上</td>
</tr>
</tbody></table>
<h2><span id="4-apart">4. apart</span></h2><p>adv. 相隔；分开</p>
<p>phr. apart from 除……以外</p>
<h4><span id="词根词缀">词根词缀</span></h4><p>a- 把一个单词变成状态去描述，例如</p>
<table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>aside</td>
<td></td>
<td>asleep</td>
<td></td>
</tr>
<tr>
<td>awake</td>
<td></td>
<td>alive</td>
<td></td>
</tr>
</tbody></table>
<h4><span id="真题例句">真题例句</span></h4><p>（2007-6 阅读）</p>
<p><em>Apart from</em> a series of fortunate events, what is that has made Google so successful?</p>
<h4><span id="形近词">形近词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>partner</td>
<td>n. 配偶；合伙人；搭档</td>
</tr>
</tbody></table>
<h5><span id="派生词">派生词</span></h5><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>partnership</td>
<td>n. 伙伴关系；合作关系</td>
</tr>
</tbody></table>
<p>-ship，如 relationship (n.)</p>
<p>-hood，如 childhood (n.)</p>
<h2><span id="5-participate">5. participate</span></h2><p>v. 参与，参加</p>
<p>分解：part + cip(to take) + ate</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2014-6听力）</p>
<p>A lot of <em>contestants</em>（参赛者） participated in the show.</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th align="center">单词/词组</th>
<th align="center">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">participation</td>
<td align="center">n. 参与，参加</td>
</tr>
<tr>
<td align="center">participant</td>
<td align="center">n. 参与者，参加者</td>
</tr>
</tbody></table>
<h2><span id="6-counterpart">6. ⭐counterpart</span></h2><p>n. 对应的人或事物</p>
<p>分解：counter- (against) + part</p>
<p>⭐counter</p>
<p>例如，反恐精英 CS (Counter-Strike)</p>
<h4><span id="真题例句">真题例句</span></h4><p>n. 对应的人或事物</p>
<p>（2014-6 段落匹配）</p>
<p>So why are American women so far ahead of <em>their Swedish counterparts</em> in breaking through the glass ceiling?</p>
<p>写作运用：A、B对比</p>
<p>The time of students use of computer reached 2hrs a week in 1990 and it doubled in 1995, in 2002, the <em>counterpart</em> hit 14 hrs a week.</p>
<p><img src="https://i.loli.net/2021/07/24/PlSFD6LjxJoT5qh.png" alt="image-20210724171148796"></p>
<h2><span id="7-depart">7. depart</span></h2><p>v. 离开，启程，违背；辞职；去世</p>
<p>分解：de- (away, apart) + part</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>departure</td>
<td>n. 离开，启程；违背；辞职</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语笔记</tag>
        <tag>恋词</tag>
      </tags>
  </entry>
  <entry>
    <title>FE-Learning-note</title>
    <url>/2021/07/24/FE-Learning-note/</url>
    <content><![CDATA[<h2><span id="先挖个坑">先挖个坑</span></h2><p>等先学完CSS部分再补。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>HTML &amp; CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>2019恋词 - Unit 2</title>
    <url>/2021/07/25/2019-love-word-Unit-2/</url>
    <content><![CDATA[<ul>
<li><a href="#1-state">1. state</a></li>
<li><a href="#2-statistics">2. statistics</a></li>
<li><a href="#3estate">3.estate</a></li>
<li><a href="#4-establish">4. establish</a></li>
<li><a href="#5-strategy">5. strategy</a></li>
<li><a href="#6-direct">6. direct</a></li>
<li><a href="#7-like">7. like</a></li>
<li><a href="#8-most">8. most</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="1-state">1. state</span></h2><p>n.洲；</p>
<p>n. 状态</p>
<p>v. 表明，列明</p>
<h4><span id="真题例句">真题例句</span></h4><p>⭐1: n.洲；</p>
<p>He comes form the Ohio State of  the United States of America.</p>
<p>⭐2: n. 状态 v. 表明，列明</p>
<p>Every time when he was in a dizzy <em>state</em>(n. 状态) after drinking some wines, he would like to <em>state</em>（v. 表明，列明） various reasons to prove that life is not easy.</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>statement</td>
<td>n. 陈述，声明</td>
</tr>
</tbody></table>
<h4><span id="形近词">形近词</span></h4><table>
<thead>
<tr>
<th align="left">单词/词组</th>
<th align="center">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">overstate</td>
<td align="center">v. 夸大；对……言过其实</td>
<td>exaggerate</td>
<td>v. 夸大；对……言过其实</td>
</tr>
<tr>
<td align="left">statue</td>
<td align="center">n. 雕像，雕塑</td>
<td>statutory</td>
<td>adj. 法令的，法规的</td>
</tr>
<tr>
<td align="left">static</td>
<td align="center">adj. 静止的，不变化的</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2><span id="2-statistics">2. statistics</span></h2><p>n. <strong>统计数据（或资料）</strong>；统计学</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2013-6阅读） n. *统计数据（或资料）；统计学</p>
<p>The problem is that the statistics aren’t an objective measure of reality; they are simply a best approximation(n. 近似值).</p>
<h2><span id="3estate">3.estate</span></h2><p>n. 不动产；地产；遗产</p>
<h4><span id="词根词缀">词根词缀</span></h4><p><strong>sta-</strong> / stac- / stad- / stan- : stand,make or be firm</p>
<p>稳定不动，伫立……</p>
<p>e- : out, 往外</p>
<h2><span id="4-establish">4. establish</span></h2><p>v. 建立；设立；制定；确定；确立（地位）</p>
<h4><span id="词根词缀">词根词缀</span></h4><p>e- + stab- + lish (v.)</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2010-6 阅读）</p>
<p>Last spring one of the two, Australia, gave up the dubious distinction by <em>establishing</em> paid family leave starting in 2011.</p>
<table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>dubious</td>
<td>adj. 可疑的；模棱两可的</td>
</tr>
</tbody></table>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>establishment</td>
<td>n. 成立；建立；机构；企业</td>
</tr>
</tbody></table>
<h2><span id="5-strategy">5. strategy</span></h2><p>n. 战略；策略</p>
<h4><span id="词根词缀">词根词缀</span></h4><p>stere(to spread) to eg(to act)</p>
<p>eg/ag : act 行动</p>
<p>stereo 立体声</p>
<p>mono 单声道</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2012-6阅读）</p>
<p>In face of global warming, much effort has been focused on reducing greenhouse gas emissions through a variety of <em>strategies</em>.</p>
<h2><span id="6-direct">6. direct</span></h2><p>v. 指向；指引；指导，管理；指示，命令；指导（电影等）</p>
<p>adj. 径直的，直达的；<strong>直接的</strong>；坦率的</p>
<h4><span id="词根词缀">词根词缀</span></h4><p>di-(down) + rect(straight)</p>
<h4><span id="真题例句">真题例句</span></h4><p>（2013-12 阅读）v. 指示，命令</p>
<p>Meanwhile, a second group was <em>directed</em> to solve the same problems by collaborating with one another, without any prompts from their instructor.</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>direction</td>
<td align="left">n. 方向；方位；（发展）趋势；指示，说明</td>
<td><strong>director</strong></td>
<td>n. 导演；主任，主管；（公司的）经理，董事</td>
</tr>
<tr>
<td>directory</td>
<td align="left">n. 通讯录；（网站上的）专题目录</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4><span id="形近词">形近词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>rectify</td>
<td align="left">v. 纠正，改正，修改</td>
<td>directory</td>
<td>n. 通讯录；（网站上的）专题目录</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>correct</td>
<td>adj. 正确的；恰当的；得体的<br>v. 纠正；纠正；修改；<strong>修正</strong></td>
</tr>
</tbody></table>
<h5><span id="词根词缀">词根词缀</span></h5><p>co- + r + rect</p>
<p>co- = con- =com- : 共同，完全，<strong>加强</strong></p>
<p>例如，cooperate\contribute</p>
<h5><span id="派生词">派生词</span></h5><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>correction</td>
<td align="left">n. 批改；惩罚</td>
<td>corrective</td>
<td>adj. 改正的；纠正的/ n. 起纠正作用的东西；修正</td>
</tr>
</tbody></table>
<h5><span id="形近词">形近词</span></h5><table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>erect</td>
<td>v. 建造；建立，创立<br>adj. 直立的；竖直的</td>
</tr>
</tbody></table>
<h5><span id="真题例句">真题例句</span></h5><p>(2014-12 选词填空)  v. 建立，创立</p>
<p>Thus once they enter school, children begin to define subjects and <em>erect boundaries</em> that needn’t to otherwise exist.</p>
<table>
<thead>
<tr>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>boundaries</td>
<td>n.边界，界线（boundary的复数形式）；界限</td>
</tr>
</tbody></table>
<h2><span id="7-like">7. like</span></h2><p>prep. 像，像……一样；比如，例如</p>
<p>conj. 好像；如同</p>
<p>v. 喜欢；（用于征询意见）觉得；想要，希望</p>
<p>n. 爱好；喜欢的事物</p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>likely</td>
<td align="left">adj. 可能的；看来要发生的；有（……）倾向的</td>
<td>likelihood</td>
<td>n. 可能；可能性；可能的事</td>
</tr>
<tr>
<td>likeness</td>
<td align="left">n. （外表的）相似，相近；肖像，塑像</td>
<td>unlike</td>
<td>prep. 不像；与……不同</td>
</tr>
<tr>
<td><strong>alike</strong></td>
<td align="left">adj. 相似的<br><strong>adv.相似地；同样地；两者都</strong> both</td>
<td>dislike</td>
<td>v. 不喜欢；厌恶<br>n. 厌恶的事物；不喜欢，反感</td>
</tr>
<tr>
<td>likewise</td>
<td align="left">adv. 同样地；类似地</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2><span id="8-most">8. most</span></h2><p>pron. 大多数；大部分</p>
<p>adv. 极其，很；最；几乎，差不多</p>
<p>det.（determiner 限定词） 最多的；最大量的 </p>
<h4><span id="派生词">派生词</span></h4><table>
<thead>
<tr>
<th>单词/词组</th>
<th align="left">释义</th>
<th>单词/词组</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>mostly</td>
<td align="left">adv. 大多；多半；主要地</td>
<td>outermost</td>
<td>outer + most<br>adj. 最外面的；离中心最远的</td>
</tr>
<tr>
<td>utmost</td>
<td align="left">ut(at) + most<br>n. 极度；极限；最大可能<br>adj. 极度的；最大的</td>
<td>foremost</td>
<td>fore + most<br>fore-: pref.在前部；在前<br>adj. 最重要的；最先的<br>adv. 首先；居于首位地</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语笔记</tag>
        <tag>恋词</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 变量与数据类型</title>
    <url>/2021/08/10/JS%20-%20%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%8F%98%E9%87%8F">变量</a></li>
<li><a href="#%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4-">加减乘除 <code>+</code> <code>-</code> <code>*</code> <code>/</code></a><ul>
<li><a href="#var-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F">var 声明变量</a></li>
<li><a href="#%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83">变量命名规范</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li>
<li><a href="#%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81">练习代码</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="变量">变量</span></h2><p>语句结束加分号 加不加其实都可以 但为了规范要加分号。</p>
<h2><span id="加减乘除-">加减乘除 <code>+</code> <code>-</code> <code>*</code> <code>/</code></span></h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 = <span class="number">20</span>,</span><br><span class="line">  n2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 加减乘除 + - * /</span></span><br><span class="line"><span class="keyword">var</span> result = n1 / n2;</span><br><span class="line"><span class="comment">// var result = n1 * n2;</span></span><br><span class="line"><span class="comment">// var result = n1 - n2;</span></span><br><span class="line"><span class="comment">// var result = n1 + n2;</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"hello"</span>,</span><br><span class="line">  s2 = <span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">var</span> result = s1 + s2;</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">"100"</span>, s4 = <span class="string">"200"</span></span><br><span class="line"><span class="keyword">var</span> result1 =  s3 + s4;</span><br><span class="line"><span class="built_in">console</span>.log(result1);<span class="comment">// 100200</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="var-声明变量">var 声明变量</span></h3><p>s 是 string 字符串的缩写，常用 s 来定义字符串<br>”=“ 变量赋值：将右侧的数据赋值给左侧的变量,不是等于的意思。<br>var 声明 定义多个变量，要用逗号隔开</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="变量命名规范">变量命名规范</span></h3><ul>
<li>变量名要见名知意思（要有语义）</li>
<li>变量名可以是<ul>
<li>字母、下划线、$，还有数字，但是不能以数字开头。</li>
<li>不可以用关键字、保留字命名。</li>
<li>小写字母开头，多个单词，第二个单词首字母大写（驼峰命名，例如 firstName）</li>
</ul>
</li>
</ul>
<h2><span id="数据类型">数据类型</span></h2><p>数据类型就是存储在变量中的数据，是有不同类型的。<br>六种数据类型：</p>
<ul>
<li>字符串 String : “hello world” “你好世界”</li>
<li>数值 Number : 100,1,2,3</li>
<li>布尔数据类型 Boolean ：真 true, 假 false。</li>
<li>未定义 Undefined : underfined</li>
<li>空 Null : null</li>
<li>对象 Object ：{}</li>
</ul>
<h2><span id="练习代码">练习代码</span></h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"world"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// var 声明变量</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   var s = "hello world";</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(s);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var 声明 定义多个变量，要用逗号隔开</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//数据类型</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   var s1 = "hello",</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//     s2 = "world"; //字符串类型</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(s1);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(s2);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   var n = 100; //数值类型</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(n);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   var b = true; //布尔值布尔数据类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> n1 = <span class="number">20</span>, n2 = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 加减乘除 + - * /</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result = n1 / n2;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// var result = n1 * n2;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var result = n1 - n2;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var result = n1 + n2;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(result);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> s1 = <span class="string">"hello"</span>, s2 = <span class="string">"world"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result = s1 + s2;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result); <span class="comment">// helloworld</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> s3 = <span class="string">"100"</span>, s4 = <span class="string">"200"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> result1 = s3 + s4;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result1); <span class="comment">// 100200</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 表达式与运算符</title>
    <url>/2021/08/11/JS%20-%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<ul>
<li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6">表达式与运算符</a><ul>
<li><a href="#%E5%AD%97%E9%9D%A2%E9%87%8F">字面量</a></li>
<li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a></li>
</ul>
</li>
<li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a><ul>
<li><a href="#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6">算数运算符</a></li>
<li><a href="#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6">比较运算符</a></li>
<li><a href="#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6">逻辑运算符</a></li>
<li><a href="#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6">赋值运算符</a></li>
</ul>
</li>
<li><a href="#%E6%AF%94%E8%BE%83%E4%B8%8D%E5%90%8C%E7%9A%84%E7%B1%BB%E5%9E%8B">比较不同的类型</a></li>
<li><a href="#%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81">练习代码</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="表达式与运算符">表达式与运算符</span></h2><h3><span id="字面量">字面量</span></h3><p><code>"hello world"</code>、<code>100</code>、<code>console.log(字面量)</code></p>
<h3><span id="表达式">表达式</span></h3><p>通过运算符将变量、字面量组合起来，就是表达式。每一个表达式都有一个固定返回值（表达式的结果）<br><code>"hello" + "world"</code>、<code>10 - 20</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span> + <span class="string">"world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> - <span class="number">20</span>);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"hello"</span>; <span class="comment">//将字面量赋值给变量</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">var</span> result = s1 + s2; <span class="comment">// 将表达式赋值给变量，返回值："helloworld"</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// helloworld</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="运算符">运算符</span></h2><h3><span id="算数运算符">算数运算符</span></h3><ul>
<li><p>加法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> + <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>减法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> - <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>乘法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> * <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>除法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> / <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>系数</p>
<p>求余</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">17</span> % <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>应用场景，可用于判断奇偶数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">17</span>,</span><br><span class="line">  num2 = <span class="number">188</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 % <span class="number">2</span>); <span class="comment">// 奇数 1</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 % <span class="number">2</span>); <span class="comment">// 偶数 0</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><strong>递增</strong></p>
<p>++ 代表了自增 1，n++ 返回的是自增之前的值，++n 返回的则是自增后的值。</p>
<p><em>单独写 ++n 和 n++， 输出结果是一样。如果是跟其他代码一起的话，结果会不一样。</em></p>
<p>因为 ++n 是<strong>先加</strong> 1，再进行运算。而 n++ 是先进行运算，<strong>后加</strong> 1。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">188</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++num1); <span class="comment">// 189</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">188</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num3++); <span class="comment">// 188</span></span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 189</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>相关基础题</strong></p>
<p>(num++) + (++num)，中间的加号是加法运算符。</p>
<p>num++返回的是 188,这时候 num 已经变成 189.所以++num 就返回的是 190,所以答案就是 188+190=378。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//求返回结果是多少？ 378</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">188</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num++ + ++num);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><strong>递减</strong></p>
<p>与递增同理，只不过是加变成减。</p>
</li>
</ul>
<h3><span id="比较运算符">比较运算符</span></h3><p>比较运算符在逻辑语句中使用，以判定变量或值是否相等。比较的时候要注意数据类型。</p>
<ul>
<li><p>&gt; 大于</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &gt; <span class="number">20</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>&lt; 小于</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt; <span class="number">20</span>); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>&gt;= 大于或等于</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &gt;= <span class="number">10</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> &gt;= <span class="number">10</span>); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>&lt;= 小于或等于</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &lt;= <span class="number">10</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> &lt;= <span class="number">10</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>== 等于</p>
<p><em>不比较数据类型，如果数据类型不同就会有内部的数据转换，转换成相同的数据类型再来比较（可能会影响性能）</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> == <span class="number">20</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> == <span class="number">10</span>); <span class="comment">//fasle</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> == <span class="string">"20"</span>); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>!= 不等</p>
<p><em>不比较数据类型，如果数据类型不同就会有内部的数据转换，转换成相同的数据类型再来比较（可能会影响性能）</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> != <span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> != <span class="number">1</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> != <span class="string">"2"</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> != <span class="string">"1"</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>=== 等值等型，值相等并且类型相等</p>
<p><em>全等于，比较数据类型，不会进行数据转换，（最佳实践，最优方式）</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> === <span class="string">"20"</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> === <span class="number">20</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">20</span> === <span class="number">10</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>!== 不等值或不等型，值不相等或类型不相等</p>
<p>比较数据类型，不会进行数据转换，（最佳实践，最优方式）</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> !== <span class="string">"2"</span>); <span class="comment">//true 最佳实践</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> !== <span class="string">"1"</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> !== <span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> !== <span class="number">1</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3><span id="逻辑运算符">逻辑运算符</span></h3><p>逻辑运算符用于判定变量或值之间的逻辑。</p>
<ul>
<li><p><strong>&amp;&amp; 逻辑与</strong></p>
<p><em>如果左右两个都是 true，返回结果就是 true，如果其中一个有 false,返回结果就是 false</em></p>
<p>true &amp;&amp; true → true</p>
<p>true &amp;&amp; false → false</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>应用场景 如登录账户密码判断</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="string">"123456"</span>;</span><br><span class="line"><span class="comment">//当账号、密码都正确时，返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"admin"</span> &amp;&amp; password === <span class="string">"123456"</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//当账号、密码其中有一个错时，返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"aadmin"</span> &amp;&amp; password === <span class="string">"123456"</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"admin"</span> &amp;&amp; password === <span class="string">"1234567"</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><strong>|| 逻辑或</strong></p>
<p><em>左右两个中只要有一个 true，返回结果就是 true，当两个都是 true 时返回 true，除非两个都是 false，返回结果才是 false</em></p>
<p>true || false → true</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">true</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">true</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">false</span>); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>逻辑或 的应用场景 如登录账户密码判断</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//如果用户填的满足两个条件其中一个那么就返回true，如果两个条件都不满足那么就返回false。</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">"aadmin"</span>; <span class="comment">//假设是用户自己填的</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"admin"</span> || username === <span class="string">"test"</span>); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">"admin"</span>; <span class="comment">//假设是用户自己填的</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"admin"</span> || username === <span class="string">"test"</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> username = <span class="string">"test"</span>; <span class="comment">//假设是用户自己填的</span></span><br><span class="line"><span class="built_in">console</span>.log(username === <span class="string">"admin"</span> || username === <span class="string">"test"</span>); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>! 逻辑非，<em>遇到的时候再应用</em><br>true → false</p>
<p>false → true</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!<span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">false</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3><span id="赋值运算符">赋值运算符</span></h3><ul>
<li><p>= 赋值<br>把 10 赋值给 X<br>x = 10 → 无</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line">y = x;</span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//10</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><strong><em>+= 加并赋值(常用)</em></strong><br>x += y → x = x + y</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">y += x; <span class="comment">// 等于 y = y + x; 先看表达式的右边y+x，将20赋值给y，将10赋值给x，此时y+x等于30，最后将30赋值给表达式左边的y,此时y已被覆盖掉。</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//30</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>-= 减并赋值 <em>同理</em><br>x -= y → x = x - y</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">y -= x; <span class="comment">// 等于 y = y - x;</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//10</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>*= 乘并赋值 同理<br>x *= y → x = x * y</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">y *= x; <span class="comment">// 等于 y = y * x;</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//200</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>/= 除并赋值<br>x /= y → x = x / y</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">y /= x; <span class="comment">// 等于 y = y / x;</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2><span id="比较不同的类型">比较不同的类型</span></h2><p>比较不同类型的数据也许会出现不可预料的结果。</p>
<p>如果将字符串与数字进行比较，那么在做比较时 JavaScript 会把字符串转换为数值。空字符串将被转换为 0。非数值字符串将被转换为始终为 false 的 NaN。</p>
<table>
<thead>
<tr>
<th align="left">案例</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2 &lt; 12</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">2 &lt; “12”</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">2 &lt; “John”</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">2 &gt; “John”</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">2 == “John”</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">“2” &lt; “12”</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">“2” &gt; “12”</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">“2” == “12”</td>
<td align="left">false</td>
</tr>
</tbody></table>
<p>当比较两个字符串时，”2” 大于 “12”，因为（_按照字母排序_）1 小于 2。</p>
<h2><span id="练习代码">练习代码</span></h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//   字面量和表达式</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log("hello world");</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log("hello" + "world");</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(10 - 20);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var s1 = "hello"; //将字面量赋值给变量</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var s2 = "world";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var result = s1 + s2; // 将表达式赋值给变量，返回值："helloworld"</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(result); // helloworld</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//算数运算符</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 + 10);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 - 10);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 * 10);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 / 10);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 求余</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(17 % 2);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   var num1 = 17,</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//     num2 = 188;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(num1 % 2); // 奇数 1</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(num2 % 2); // 偶数 0</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自增 自减</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   var num1 = 188;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(++num1); // 189</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   var num2 = 188;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(--num2); // 187</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   var num3 = 188;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(num3++); // 188</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//   console.log(num3); // 189</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// var num = 188;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(num++ + ++num);</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//求返回结果是多少？ 378</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//188 + 190=378</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// //比较运算符，返回值是一个布尔类型：true\false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(10 &gt; 20)//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(10 &gt;= 10)//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(100 &gt;= 10);//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 == 10);//fasle</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 != "1");//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 !== 2);//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 === 10);//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 !== 1);//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 !== "1");//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(10 &lt;= 10)//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(100 &lt;= 10)//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //不比较数据类型，如果数据类型不同就会有内部的数据转换，转换成相同的数据类型再来比较（可能会影响性能）</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 == "20")//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //全等于，不会进行数据转换，（最佳实践，最优方式）</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(20 === "20")//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //不等于</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 != 2)//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 != 1)//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 != "2")//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(1 !== "2")//true 最佳实践</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//逻辑运算符</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// &amp;&amp; 逻辑与 如果左右两个都是true，返回结果就是true，如果其中一个有false,返回结果就是false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(true &amp;&amp; true)// true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(true &amp;&amp; false)// false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(false &amp;&amp; true)// false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// // 逻辑与 的应用场景 如登录账户密码判断</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var username = "admin";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var password = "123456";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //当账号、密码都正确时，返回true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "admin" &amp;&amp; password === "123456");</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// //当账号、密码其中有一个错时，返回false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "aadmin" &amp;&amp; password === "123456");</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "admin" &amp;&amp; password === "1234567");</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// || 逻辑或 左右两个中只要有一个true，返回结果就是true，当两个都是true时返回true，除非两个都是false，返回结果才是false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(true || true); //true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(true || false); //true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(false || true); //true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(false || false); //false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// // 逻辑或 的应用场景 如登录账户密码判断 var username ="";//用户自己填</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//如果用户填的满足两个条件其中一个那么就返回true，如果两个条件都不满足那么就返回false。</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var username = "aadmin";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "admin" || username === "test");//false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var username = "admin";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "admin" || username === "test");//true</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// var username = "test";</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(username === "admin" || username === "test");//true</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// ! 逻辑非，遇到的时候再应用</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(!true)// false</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// console.log(!false)// true</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//赋值运算符</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// = 赋值</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y;</span></span><br><span class="line">  y = x;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(y); <span class="comment">//10</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//+= 加并赋值(常用)</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">  y += x; <span class="comment">// 等于 y = y + x; 先看表达式的右边y+x，将20赋值给y，将10赋值给x，此时y+x等于30，最后将30赋值给表达式左边的y,此时y已被覆盖掉。</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(y); <span class="comment">//30</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//-= 减并赋值 同理</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">  y -= x; <span class="comment">// 等于 y = y - x;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(y); <span class="comment">//10</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//*= 乘并赋值 同理</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">  y *= x; <span class="comment">// 等于 y = y * x;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(y); <span class="comment">//200</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">///= 除并赋值 同理</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">  y /= x; <span class="comment">// 等于 y = y / x;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(y); <span class="comment">//2</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 流程控制语句</title>
    <url>/2021/08/13/JS%20-%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<ul>
<li><a href="#%E8%AF%AD%E5%8F%A5%E5%9D%97">语句块</a></li>
<li><a href="#%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B">控制流程</a><ul>
<li><a href="#%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C">按顺序执行</a></li>
<li><a href="#%E6%8C%89%E6%9D%A1%E4%BB%B6%E6%89%A7%E8%A1%8C">按条件执行</a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E6%89%A7%E8%A1%8C">循环执行</a></li>
</ul>
</li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E8%BE%93%E5%87%BA-100-%E4%BB%A5%E5%86%85%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0">1. 输出 100 以内所有奇数。</a></li>
<li><a href="#2-%E8%AE%A1%E7%AE%97-100-%E4%BB%A5%E5%86%85%E6%89%80%E6%9C%89%E6%AD%A3%E6%95%B4%E6%95%B0%E5%8A%A0%E5%92%8C">2. 计算 100 以内所有正整数加和。</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="语句块">语句块</span></h2><p>多条 JS 语句组成的语句，用大括号括起来，就是一个语句块。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">"hello world"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="控制流程">控制流程</span></h2><p>程序执行流程主要分为三种：</p>
<ol>
<li><p>按顺序执行</p>
</li>
<li><p>按条件执行</p>
</li>
<li><p>循环执行</p>
</li>
</ol>
<p><em>注：此前学习的内容都是按顺序执行。以下是条件执行。</em></p>
<h3><span id="按顺序执行">按顺序执行</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//30</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="按条件执行">按条件执行</span></h3><h4><span id="条件运算符">条件运算符</span></h4><p><strong>条件（三元）运算符</strong>是 JavaScript 仅有的使用三个操作数的运算符。一个条件后面会跟一个问号（?），如果条件为 <code>truthy </code>，则问号后面的表达式 A 将会执行；表达式 A 后面跟着一个冒号（:），如果条件为<code>falsy</code>，则冒号后面的表达式 B 将会执行。本运算符经常作为 <code>if</code> 语句的简捷形式来使用。</p>
<p><code>boolean ? value1 : value2</code></p>
<h4><span id="if-语句">if 语句</span></h4><p>分支语句</p>
<p>根据 if 后面的条件，决定是否执行后面的语句块。</p>
<p>Boolean：真 / 假</p>
<ul>
<li><p>if</p>
<p><code>if (boolean) {</code></p>
<p>``//语句块`</p>
<p><code>}</code></p>
</li>
<li><p>if - else</p>
<p><code>if (boolean) {</code></p>
<p>`` //语句块1`</p>
<p><code> } else {</code></p>
<p><code>//语句块2</code></p>
<p><code>}</code></p>
</li>
</ul>
<h5><span id="最简单的例子">最简单的例子</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world1"</span>); <span class="comment">//打印</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world2"</span>); <span class="comment">//不打印</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-判断算术运算符">例子 - 判断算术运算符</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>,</span><br><span class="line">  op = <span class="string">"+"</span>;</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"+"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">//30</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>,</span><br><span class="line">  op = <span class="string">"-"</span>;</span><br><span class="line"><span class="comment">//不执行，因为op不是加号。</span></span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"+"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>,</span><br><span class="line">  op = <span class="string">"/"</span>;</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"+"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="string">"-"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 - num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="string">"*"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 * num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="string">"/"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 / num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请输入正确的操作符"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="comment">//虽然能实现功能，但是浪费性能。最好不要写这种。</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>,</span><br><span class="line">  op = <span class="string">"/"</span>;</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"+"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"-"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 - num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"*"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 * num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (op === <span class="string">"/"</span>) {</span><br><span class="line">  <span class="keyword">var</span> result = num1 / num2;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-判断两个数的大小">例子 - 判断两个数的大小</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (num1 &gt; num2) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"num1 大于 num2"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"num1 小于或等于 num2"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件运算符，可以简化 if 语句</span></span><br><span class="line"><span class="comment">//          Boolean   ？ value1          :  value2</span></span><br><span class="line"><span class="keyword">var</span> str = num1 &gt; num2 ? <span class="string">"num1 大于 num2"</span> : <span class="string">"num1 小于或等于 num2"</span>;</span><br><span class="line"><span class="comment">// var str = (num1 &gt; num2) ? "num1 大于 num2" : "num1 小于或等于 num2";</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="相关基础题-求-c-的值a-的值">相关基础题 - 求 c 的值，a 的值。</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = b &gt; <span class="number">1</span> ? a++ : <span class="number">0</span>;</span><br><span class="line"><span class="comment">//先判断b是否大于1，因为结果是真，所以执行a++。</span></span><br><span class="line"><span class="comment">//又因为a++是先运算后加，所以此时的a还是1，所以把1赋值给c.</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// c = 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a = 2</span></span><br></pre></td></tr></tbody></table></figure>

<h4><span id="switch-语句">switch 语句</span></h4><p>分支语句</p>
<p>可以实现多重选择，某些情况相对于 if 语句更简洁。</p>
<p><code>switch (表达式) {</code></p>
<p><code>case 值1: 语句1; break;</code></p>
<p><code>case 值2: 语句2; break; </code></p>
<p><code>case 值3: 语句3; break; </code></p>
<p><code>default: 语句4; </code></p>
<p><code>}</code></p>
<h5><span id="例子-判断算术运算符">例子 - 判断算术运算符</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>,</span><br><span class="line">  num2 = <span class="number">20</span>,</span><br><span class="line">  op = <span class="string">"+"</span>;</span><br><span class="line"><span class="keyword">switch</span> (op) {</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(num1 - num2);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(num1 * num2);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(num1 / num2);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请输入正确的操作符"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上为 2021 年 8 月 12 日学习内容。</p>
</blockquote>
<h3><span id="循环执行">循环执行</span></h3><h4><span id="while">while</span></h4><p>根据条件循环</p>
<p><code>while(){</code></p>
<p><code> 语句;</code></p>
<p><code> 语句;</code></p>
<p><code> //根据需要在此放置更多语句</code></p>
<p>``}`</p>
<h5><span id="例子-死循环">例子 - 死循环</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//小心使用</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-打印输出-1-10">例子 - 打印输出 1-10</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-计算-100-以内所有正整数的加和">例子 - 计算 100 以内所有正整数的加和</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 直接计算</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">1</span>,</span><br><span class="line">  n2 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> result = (n1 + n2) * <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>,</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) {</span><br><span class="line">  sum += i; <span class="comment">//sum = sum + i;</span></span><br><span class="line">  i++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-在控制输出-100-以内所有奇数"><strong>例子 -</strong> 在控制输出 100 以内所有奇数</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) {</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  }</span><br><span class="line">  i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4><span id="dowhile">do…while…</span></h4><p>先执行一个语句块，然后再根据条件循环。</p>
<p>一定会执行 do 语句块，是否是循环执行就取决于 while 条件。</p>
<h5><span id="例子-打印输出-1-10">例子 - 打印输出 1-10</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i++;</span><br><span class="line">} <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="dowhile与-while-的区别">do…while…与 while 的区别</span></h5><p>前者至少会执行一次，后者可能一次都不执行</p>
<h4><span id="for">for</span></h4><p>根据条件循环。</p>
<p>大部分情况下，while 与 for 是可以互换的。</p>
<h5><span id="例子-打印输出-1-10">例子 - 打印输出 1-10</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//   计数器的初值  条件    自加自减类的操作js</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-计算-100-以内所有正整数的加和">例子 - 计算 100 以内所有正整数的加和</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">  sum += i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-输出-100-以内的奇数">例子 - 输出 100 以内的奇数</span></h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-输出-100-以内所有奇数">1. 输出 100 以内所有奇数。</span></h3>   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//do...while...</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  }</span><br><span class="line">  i++;</span><br><span class="line">} <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure>

   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//while</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) {</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  }</span><br><span class="line">  i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-计算-100-以内所有正整数加和">2. 计算 100 以内所有正整数加和。</span></h3>   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">  sum += i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure>

   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//do...while...</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>,</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">  sum += i;</span><br><span class="line">  i++;</span><br><span class="line">} <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure>

   <figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//while</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>,</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) {</span><br><span class="line">  sum += i;</span><br><span class="line">  i++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上为 2021 年 8 月 13 日 （16 点 48 分）学习内容。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 函数基础</title>
    <url>/2021/08/14/JS%20-%20%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li><a href="#%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0">数学函数</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E6%A6%82%E8%BF%B0">函数概述</a></li>
<li><a href="#%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">传递参数</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0">例子 - 一个参数</a></li>
</ul>
</li>
<li><a href="#%E4%BE%8B%E5%AD%90-%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0">例子 - 两个参数</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%9A%84%E5%87%BD%E6%95%B0">例子 - 定义一个计算四则运算的函数</a></li>
</ul>
</li>
<li><a href="#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E6%A3%80%E6%9F%A5%E7%94%A8%E6%88%B7%E5%90%8D-%E5%AF%86%E7%A0%81%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE">例子 - 检查用户名、密码是否正确</a></li>
</ul>
</li>
<li><a href="#%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0">理解函数</a></li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0-n%E8%AE%A1%E7%AE%97-1~n-%E6%89%80%E6%9C%89%E6%AD%A3%E6%95%B4%E6%95%B0%E7%9A%84%E5%8A%A0%E5%92%8C">1. 编写一个函数，参数为一个正整数 n，计算 1~n 所有正整数的加和。</a></li>
<li><a href="#2-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0-n%E8%AE%A1%E7%AE%97-1~n-%E4%B9%8B%E9%97%B4%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0">2. 编写一个函数，参数为一个正整数 n，计算 1~n 之间所有奇数。</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="数学函数">数学函数</span></h2><figure class="highlight llvm"><table><tbody><tr><td class="code"><pre><span class="line">f(<span class="keyword">x</span>) <span class="operator">=</span> <span class="number">3</span><span class="keyword">x</span> + <span class="number">4</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">当 <span class="keyword">x</span> <span class="operator">=</span> <span class="number">5</span> 时；求 f(<span class="keyword">x</span>)的值。</span><br><span class="line"></span><br><span class="line">f(<span class="number">5</span>)<span class="operator">=</span> <span class="number">3</span>\*<span class="number">5</span> + <span class="number">4</span> <span class="operator">=</span> <span class="number">19</span></span><br></pre></td></tr></tbody></table></figure>

<p>5：实参</p>
<p>x：形参</p>
<figure class="highlight llvm"><table><tbody><tr><td class="code"><pre><span class="line">f(<span class="keyword">x</span> <span class="punctuation">,</span> y) <span class="operator">=</span> <span class="number">3</span><span class="keyword">x</span> + <span class="number">4</span>y + <span class="number">5</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">当 <span class="keyword">x</span> <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="number">3</span> 时；求 f(<span class="keyword">x</span> <span class="punctuation">,</span> y)的值。</span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span> <span class="punctuation">,</span> <span class="number">3</span>)<span class="operator">=</span> <span class="number">3</span>\*<span class="number">2</span> + <span class="number">4</span>\*<span class="number">3</span> + <span class="number">5</span> <span class="operator">=</span> <span class="number">23</span></span><br><span class="line"></span><br><span class="line">函数运行的结果是 <span class="number">23</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="函数概述">函数概述</span></h2><p>函数是一个可执行的语句块（通过<code>function</code>关键字声明）。</p>
<p>声明的时候不执行语句块，调用函数时执行。</p>
<p><em>声明之后可以反复调用，提高代码的复用能力。</em></p>
<p><code>//声明函数 </code></p>
<p><code>function fun(){</code></p>
<p><code> //语句...</code></p>
<p><code>} </code></p>
<p><code>//调用函数</code></p>
<p><code>fun();</code></p>
<h2><span id="传递参数">传递参数</span></h2><p>通过参数可以让函数的功能更具扩展性。</p>
<p>形参：声明函数的时候可以定义。</p>
<p>实参：调用函数的时候传递实参。</p>
<h3><span id="例子-一个参数">例子 - 一个参数</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明的语法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">3</span> * x + <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fun(<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="例子-两个参数">例子 - 两个参数</span></h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//多个参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">3</span> * x + <span class="number">4</span> * y + <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">fun1(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-定义一个计算四则运算的函数">例子 - 定义一个计算四则运算的函数</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">n, m, op</span>) </span>{</span><br><span class="line">  <span class="keyword">switch</span> (op) {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">      <span class="keyword">return</span> n + m;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">      <span class="keyword">return</span> n - m;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">      <span class="keyword">return</span> n * m;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">      <span class="keyword">return</span> n / m;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> result = computed(<span class="number">3</span>, <span class="number">5</span>, <span class="string">"*"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//15</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="返回值">返回值</span></h2><p>返回值表示函数运作之后的结果。</p>
<p>将返回值赋值给变量。</p>
<p>记住关键字 <code>return</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">3</span> * x + <span class="number">4</span> * y + <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(fun2(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-检查用户名-密码是否正确">例子 - 检查用户名、密码是否正确</span></h3><p>如果用户名为 admin，密码为 123456，提示登录成功，否则登录失败</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//如果用户名为admin，密码为123456，提示登录成功，否则登录失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkLogin</span>(<span class="params">username, password</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">"admin"</span> &amp;&amp; password === <span class="string">"123456"</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//定义存放结果的变量 result，通过 if 语句来判断 result 的真假再打印输出登录是否成功。</span></span><br><span class="line"><span class="keyword">var</span> result = checkLogin(<span class="string">"admin"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//result 本来就是 boolean 值，所以不用写 result === true</span></span><br><span class="line"><span class="comment">//if (result === true){</span></span><br><span class="line"><span class="keyword">if</span> (result) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"登录成功"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"登录失败"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="理解函数">理解函数</span></h2><p>可以把函数理解为一个生产车间。传递进来的参数可以多个，但是返回值只有一个。</p>
<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-编写一个函数参数为一个正整数-n计算-1~n-所有正整数的加和">1. 编写一个函数，参数为一个正整数 n，计算 1~n 所有正整数的加和。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allSum</span>(<span class="params">n</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    sum += i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(allSum(<span class="number">100</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-编写一个函数参数为一个正整数-n计算-1~n-之间所有奇数">2. 编写一个函数，参数为一个正整数 n，计算 1~n 之间所有奇数。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAllJishu</span>(<span class="params">n</span>) </span>{</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">printAllJishu(<span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 14 日 00 点 48 分</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 对象</title>
    <url>/2021/08/14/JS%20-%20%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-null">数据类型 - null</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-undefined">数据类型 - undefined</a></li>
<li><a href="#%E4%B8%96%E9%97%B4%E4%B8%87%E7%89%A9%E7%9A%86%E5%AF%B9%E8%B1%A1">世间万物皆对象</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1">对象</a><ul>
<li><a href="#%E6%96%B9%E6%B3%95">方法</a></li>
<li><a href="#this-%E5%85%B3%E9%94%AE%E5%AD%97">this 关键字</a></li>
</ul>
</li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%86%E7%B1%BB">对象的分类</a></li>
<li><a href="#%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81">练习代码</a></li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="数据类型-null">数据类型 - null</span></h2><p>什么都没有（空），未初始化一个对象，可以暂时赋值为 <code>null</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="数据类型-undefined">数据类型 - undefined</span></h2><p>不赋值的变量就是 <code>undefined </code>数据类型，<em>尽量不要定义一个 <code>undefined</code> 变量</em></p>
<p>注意不要写成 <code>var v = undefined</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v;</span><br><span class="line"><span class="built_in">console</span>.log(v); <span class="comment">//undefined</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="世间万物皆对象">世间万物皆对象</span></h2><p>桌子：宽度、高度、颜色、用途</p>
<p>猫：名字、毛色、年龄、吃东西、睡觉</p>
<h2><span id="对象">对象</span></h2><p>六种数据类型中的一种。<em>对象可以重新设置属性</em></p>
<p>定义：属性的无需集合。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>, <span class="comment">//注意是逗号</span></span><br><span class="line">  age: <span class="number">2</span>,</span><br><span class="line">};</span><br><span class="line"><span class="comment">// "." 的 cat.name 猫的名字</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="comment">// 特殊情况时可以使用这种方法，当cat.name获取不到的时候</span></span><br><span class="line"><span class="comment">// console.log(cat["name"]);</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="方法">方法</span></h3><p>属性的值是一个函数，则称为方法。可以传递参数，也可以不传递参数，还可以<code>return </code>返回值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"mm"</span>,</span><br><span class="line">  age: <span class="number">2</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是mm"</span>);</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="comment">//方法 - 也可以不传递参数</span></span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是miaomiao"</span>);</span><br><span class="line">  }, <span class="comment">// 注意逗号</span></span><br><span class="line">  <span class="comment">//方法 - 传递参数</span></span><br><span class="line">  eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃"</span> + food);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//方法 - 返回值</span></span><br><span class="line">  computed: <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"><span class="comment">//调用对象的`方法`</span></span><br><span class="line">cat.sayName(); <span class="comment">//我是miaomiao</span></span><br><span class="line">cat.eat(<span class="string">"鱼"</span>); <span class="comment">//吃鱼</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = cat.computed(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="this-关键字">this 关键字</span></h3><p>可以指向调用方法的对象。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// this.xxxx 可以指向调用方法的对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是"</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"><span class="comment">//对象可以重新设置属性</span></span><br><span class="line">cat.name = <span class="string">"小白"</span>;</span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="对象的分类">对象的分类</span></h2><ol>
<li><p>自定义对象</p>
<p>作用:封装</p>
</li>
<li><p>内置对象（例如 Date，获取当前时间）</p>
</li>
<li><p>宿主对象（document）</p>
</li>
<li><p>第三方库的对象（jQuery、Vue 等）</p>
</li>
</ol>
<h2><span id="练习代码">练习代码</span></h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  age: <span class="number">2</span>,</span><br><span class="line">};</span><br><span class="line"><span class="comment">// "." 的 cat.name 猫的名字</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="comment">// 特殊情况时可以使用这种方法，当cat.name获取不到的时候</span></span><br><span class="line"><span class="comment">// console.log(cat["name"]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null 什么都没有（空），未初始化一个对象，可以暂时赋值为null</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// //不赋值的变量就是undefined数据类型，尽量不要定义一个undefined变量</span></span><br><span class="line"><span class="keyword">var</span> v;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="comment">//方法 - 也可以不传递参数</span></span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是miaomiao"</span>);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//方法 - 传递参数</span></span><br><span class="line">  eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃"</span> + food);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//方法 - 返回值</span></span><br><span class="line">  computed: <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"><span class="comment">//调用对象的`方法`</span></span><br><span class="line">cat.sayName();</span><br><span class="line">cat.eat(<span class="string">"鱼"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = cat.computed(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="comment">//方法 - 也可以不传递参数</span></span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// this.xxxx 可以指向调用方法的对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是"</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//方法 - 传递参数</span></span><br><span class="line">  eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃"</span> + food);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//方法 - 返回值。</span></span><br><span class="line">  computed: <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"><span class="comment">//对象可以重新设置属性</span></span><br><span class="line">cat.name = <span class="string">"小白"</span>;</span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><p>掌握如何自定义对象，并获取属性，了解如何调用对象的方法，this 关键字的作用。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> cat = {</span><br><span class="line">  name: <span class="string">"mm"</span>,</span><br><span class="line">  age: <span class="number">2</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  },</span><br><span class="line">  eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"eat"</span> + food);</span><br><span class="line">  },</span><br><span class="line">  computed: <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.age);</span><br><span class="line">cat.name = <span class="string">"sb"</span>;</span><br><span class="line">cat.sayName();</span><br><span class="line">cat.eat(<span class="string">"fish"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = cat.computed(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 14 日 20 点 24 分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 数组</title>
    <url>/2021/08/16/JS%20-%20%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<ul>
<li><a href="#%E6%95%B0%E7%BB%84%E6%A6%82%E8%BF%B0">数组概述</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0">获取数组中的元素</a></li>
<li><a href="#%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84">遍历数组</a><ul>
<li><a href="#1-while-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86">1. while 循环遍历</a></li>
<li><a href="#2-for-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84">2. for 循环遍历数组</a></li>
<li><a href="#3-for-in-%E9%81%8D%E5%8E%86-i-%E4%B8%BA%E7%B4%A2%E5%BC%95">3. for in 遍历（ i 为索引）</a></li>
<li><a href="#4-for-of-%E9%81%8D%E5%8E%86-i-%E4%B8%BA%E5%80%BC">4. for of 遍历（ i 为值）</a></li>
<li><a href="#5-map-%E6%96%B9%E6%B3%95%E9%81%8D%E5%8E%86">5. map 方法遍历</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">数组的常用方法</a><ul>
<li><a href="#1-map">1. map</a></li>
<li><a href="#2-push">2. push</a></li>
<li><a href="#3-sort">3. sort</a></li>
<li><a href="#4-filter">4. filter</a></li>
<li><a href="#5-join">5. join</a></li>
</ul>
</li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2-string-%E7%9A%84-split-%E6%96%B9%E6%B3%95">字符串 string 的 split 方法</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E6%8A%8A%E6%97%A5%E6%9C%9F-2021-8-15-%E6%8C%89-%E6%9D%A5%E6%8B%86%E5%88%86">例子 - 把日期 “2021-8-15” 按 ”-“ 来拆分</a></li>
</ul>
</li>
<li><a href="#%E7%BB%93%E5%90%88%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AF%B9%E8%B1%A1">结合数组与对象</a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E7%94%B7%E5%90%8C%E5%AD%A6%E6%94%BE%E5%85%A5%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%95%B0%E7%BB%84">例子 - 找出所有男同学，放入一个新的数组。</a></li>
</ul>
</li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84-134678111215161920-%E7%9A%84%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E5%B9%B6%E6%94%BE%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%B0%E6%95%B0%E7%BB%84%E4%B8%AD">1. 找出数组 [1,3,4,6,7,8,11,12,15,16,19,20] 的所有奇数，并放在一个新数组中。</a></li>
<li><a href="#2-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84-4612375-%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E7%B4%A2%E5%BC%95">2. 找出数组 [4,6,1,2,3,7,5] 中的最大值的索引。</a></li>
</ul>
</li>
<li><a href="#%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81">练习代码</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="数组概述">数组概述</span></h2><p>数组是一个特殊的对象，可以按顺序存储数据。</p>
<p>创建数值类型的数组：</p>
<p><code>var list = [1,2,3,4,5];</code></p>
<p>存放字符串的数组</p>
<p><code>var list = ["a","b","c"];</code></p>
<h2><span id="获取数组中的元素">获取数组中的元素</span></h2><p>通过下标获取数组中的元素。</p>
<p><code>list[0]</code>、<code>list[1]</code>、…</p>
<p>获取数组元素的个数：<code>list.length</code></p>
<p>如果想获取数组中的某一个元素，可以通过下标来获取。 0 就是第一个元素</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组 第一种方法</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="comment">// new 构造函数 第二种方法</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  [index],索引是从0开始的。</span></span><br><span class="line"><span class="keyword">var</span> item = list[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> len = list.length;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line"><span class="built_in">console</span>.log(len); <span class="comment">//3 说明数组有三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接输出list 数组全部内容</span></span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="遍历数组">遍历数组</span></h2><h3><span id="1-while-循环遍历">1. while 循环遍历</span></h3><p><code>i</code> 是 <em>索引</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line"><span class="comment">//下标索引</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; list.length) {</span><br><span class="line">  <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">  i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-for-循环遍历数组">2. for 循环遍历数组</span></h3><p><code>i</code> 是 <em>索引</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) {</span><br><span class="line">  <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="3-for-in-遍历-i-为索引">3. for in 遍历（ i 为索引）</span></h3><p><code>var i in list</code>中<code>i</code> 为索引</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> list) {</span><br><span class="line">  <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="4-for-of-遍历-i-为值">4. for of 遍历（ i 为值）</span></h3><p><code>var i of list</code> 中<code>i</code> 为值</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> list) {</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="5-map-方法遍历">5. map 方法遍历</span></h3><p>数组自带的，map 方法的参数是函数，这种函数称为<strong>回调函数</strong>。_map 有两个参数。这是顺序—— 值 、索引_。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line">list.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>{</span><br><span class="line">  <span class="comment">// console.log(value);//value是list的元素</span></span><br><span class="line">  <span class="comment">// console.log(index);//index就是list的索引</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"第"</span> + (index + <span class="number">1</span>) + <span class="string">"个元素是"</span> + value); <span class="comment">//如 第a1个元素是0</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="数组的常用方法">数组的常用方法</span></h2><h3><span id="1-map">1. map</span></h3><p>遍历数组。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line">list.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>{</span><br><span class="line">  <span class="comment">// console.log(value);//value是list的元素</span></span><br><span class="line">  <span class="comment">// console.log(index);//index就是list的索引</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"第"</span> + (index + <span class="number">1</span>) + <span class="string">"个元素是"</span> + value);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-push">2. push</span></h3><p>在结尾追加元素。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span><br><span class="line"><span class="comment">//push 在结尾追加元素</span></span><br><span class="line">list.push(<span class="string">"f"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="3-sort">3. sort</span></h3><p>排序。</p>
<p>*数值：从小到大排序。</p>
<p><em>字符串：按首字母从 a~z 来排序。</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// sort 排序，从小到大</span></span><br><span class="line">list.sort();</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="4-filter">4. filter</span></h3><p>过滤器。<code>newList = list.filter(function (item) {}</code>的<code>item</code>是数组的每个元素</p>
<h4><span id="例子-将数组中大于等于-3-的元素放到新的数组">例子 - 将数组中大于等于 3 的元素放到新的数组</span></h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">//定义一个新数组，将大于等于3的元素放到新的数组，return返回才实现过滤的效果，item是数组里的每个元素</span></span><br><span class="line"><span class="keyword">var</span> newList = list.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (item &gt;= <span class="number">3</span>) {</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(newList); <span class="comment">// [3, 6, 5]</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="5-join">5. join</span></h3><p>连接数组。</p>
<p>不加参数时，默认加逗号。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> str = list.join();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//a,b,c</span></span><br></pre></td></tr></tbody></table></figure>

<p>实现 abc，在 join 里面加参数，<em>空字符串可以设成空的连接符</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = list.join(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//abc</span></span><br></pre></td></tr></tbody></table></figure>

<p>实现 a+b+c</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = list.join(<span class="string">"+"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//a+b+c</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="字符串-string-的-split-方法">字符串 string 的 split 方法</span></h2><p>split 是字符串的拆分方法。</p>
<p>split 不设参数时，默认生成一个数组。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"banana"</span>;</span><br><span class="line"><span class="keyword">var</span> list = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// ["banana"]</span></span><br></pre></td></tr></tbody></table></figure>

<p><em>空字符串会拆分字符串</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = str.split(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// ["b","a","n","a","n","a"]</span></span><br></pre></td></tr></tbody></table></figure>

<p>按字符来拆分</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = str.split(<span class="string">"n"</span>); <span class="comment">//把 n 当成连接符来拆分</span></span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// ["ba","a","a"]</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-把日期-2021-8-15-按-来拆分">例子 - 把日期 “2021-8-15” 按 ”-“ 来拆分</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"2021-8-15"</span>;</span><br><span class="line"><span class="keyword">var</span> list = str.split(<span class="string">"-"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">//["2021", "8", "15"]</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 15 日 00 点 53 分。</p>
</blockquote>
<h2><span id="结合数组与对象">结合数组与对象</span></h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小明"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小红"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"女"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小亮"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure>

<p>获取数据：<code>list[0].name</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//获取数组里第一个对象的年龄</span></span><br><span class="line"><span class="built_in">console</span>.log(list[<span class="number">0</span>].age);</span><br><span class="line"><span class="comment">//获取数组里第一个对象的名字</span></span><br><span class="line"><span class="built_in">console</span>.log(list[<span class="number">0</span>].name);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-找出所有男同学放入一个新的数组">例子 - 找出所有男同学，放入一个新的数组。</span></h3><p>方法 1 - 数组 filter 过滤器</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小明"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小红"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"女"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小亮"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> newList = list.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (item.sex === <span class="string">"男"</span>) {</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br></pre></td></tr></tbody></table></figure>

<p>方法 2 - 数组 push 添加</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小明"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小红"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"女"</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">"小亮"</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">sex</span>: <span class="string">"男"</span> },</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newList = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) {</span><br><span class="line">  <span class="keyword">if</span> (list[i].sex === <span class="string">"男"</span>) {</span><br><span class="line">    newList.push(list[i]);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-找出数组-134678111215161920-的所有奇数并放在一个新数组中">1. 找出数组 [1,3,4,6,7,8,11,12,15,16,19,20] 的所有奇数，并放在一个新数组中。</span></h3><p>方法一 - <code>filter</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">var</span> newList = list.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (item % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(newList); <span class="comment">//[1, 3, 7, 11, 15, 19]</span></span><br></pre></td></tr></tbody></table></figure>

<p>方法二 - <code>push</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">var</span> newList = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) {</span><br><span class="line">  <span class="keyword">if</span> (list[i] % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">    newList.push(list[i]);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(newList); <span class="comment">//[1, 3, 7, 11, 15, 19]</span></span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-找出数组-4612375-中的最大值的索引">2. 找出数组 [4,6,1,2,3,7,5] 中的最大值的索引。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> max = list[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">list.map(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (value &gt; max) {</span><br><span class="line">    max = value;</span><br><span class="line">    maxIndex = index;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(max); <span class="comment">// 7 即最大值是7</span></span><br><span class="line"><span class="built_in">console</span>.log(maxIndex); <span class="comment">//5 即最大值的索引是7</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="练习代码">练习代码</span></h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//   //创建一个数组</span></span><br><span class="line"><span class="comment">//   var list = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="comment">//   // var list1 = ["a","b","c"];</span></span><br><span class="line"><span class="comment">//   // var list2 = new Array(1,2,3,4,5);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   var item = list[0]; //数组中第一个元素（索引：第0个） list[0]</span></span><br><span class="line"><span class="comment">//   var len = list.length; //数组的长度 list.length;</span></span><br><span class="line"><span class="comment">//   console.log(item); // 数组中第一个元素（索引：第0个）为 1</span></span><br><span class="line"><span class="comment">//   console.log(len); // 数组的长度为5，有5个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 1. while遍历数组 索引</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   //i 为索引</span></span><br><span class="line"><span class="comment">//   var i = 0;</span></span><br><span class="line"><span class="comment">//   while (i &lt; list.length) {</span></span><br><span class="line"><span class="comment">//     console.log(list[i]);</span></span><br><span class="line"><span class="comment">//     i++;</span></span><br><span class="line"><span class="comment">//   }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 2. for遍历数组 索引</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   for (var i = 0; i &lt; list.length; i++) {</span></span><br><span class="line"><span class="comment">//     console.log(list[i]);</span></span><br><span class="line"><span class="comment">//   }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 3. for in遍历数组 索引</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   // `var i in list` = `var i = 0; i &lt; list.length; i++`</span></span><br><span class="line"><span class="comment">//   for (var i in list) {</span></span><br><span class="line"><span class="comment">//     console.log(list[i]);</span></span><br><span class="line"><span class="comment">//   }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 4.for of 遍历数组 值</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   // `var i of list` = 数组的每个值</span></span><br><span class="line"><span class="comment">//   for (var i of list) {</span></span><br><span class="line"><span class="comment">//     console.log(i);</span></span><br><span class="line"><span class="comment">//   }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   //5. map 方法遍历</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   // map 有两个参数， 值     索引</span></span><br><span class="line"><span class="comment">//   list.map(function (value, index) {</span></span><br><span class="line"><span class="comment">//     // console.log(value);</span></span><br><span class="line"><span class="comment">//     // console.log(index);</span></span><br><span class="line"><span class="comment">//     console.log("第" + (index + 1) + "个元素是" + value);</span></span><br><span class="line"><span class="comment">//   });</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 数组的常用方法</span></span><br><span class="line"><span class="comment">//   // 1. map 遍历数组</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   list.map(function (listValue, listIndex) {</span></span><br><span class="line"><span class="comment">//     console.log("第" + (listIndex + 1) + "个元素是" + listValue);</span></span><br><span class="line"><span class="comment">//   });</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   //2. push 在结尾添加元素</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c", "d", "e"];</span></span><br><span class="line"><span class="comment">//   list.push("f");</span></span><br><span class="line"><span class="comment">//   console.log(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   //3. sort 数值：从小到大排序, 字符串：按首字母从a~z来排序</span></span><br><span class="line"><span class="comment">//   var list = [4, 2, 3, 1, 5];</span></span><br><span class="line"><span class="comment">//   var list = ["a", "c", "b", "de", "e"];</span></span><br><span class="line"><span class="comment">//   list.sort();</span></span><br><span class="line"><span class="comment">//   console.log(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 4. filter 过滤器</span></span><br><span class="line"><span class="comment">//   //将数组中大于等于 3 的元素放到新的数组</span></span><br><span class="line"><span class="comment">//   var list = [1, 3, 6, 5, 2];</span></span><br><span class="line"><span class="comment">//   var newList = list.filter(function (item) {</span></span><br><span class="line"><span class="comment">//     if (item &gt;= 3) {</span></span><br><span class="line"><span class="comment">//       return item;</span></span><br><span class="line"><span class="comment">//     }</span></span><br><span class="line"><span class="comment">//   });</span></span><br><span class="line"><span class="comment">//   console.log(newList);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // 5. join 连接数组</span></span><br><span class="line"><span class="comment">//   var list = ["a", "b", "c"];</span></span><br><span class="line"><span class="comment">//   var str = list.join();</span></span><br><span class="line"><span class="comment">//   console.log(str); //a,b,c</span></span><br><span class="line"><span class="comment">//   var str1 = list.join("");</span></span><br><span class="line"><span class="comment">//   console.log(str1); //abc</span></span><br><span class="line"><span class="comment">//   var str2 = list.join("+");</span></span><br><span class="line"><span class="comment">//   console.log(str2); //a+b+c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   // string字符串的 split 拆分</span></span><br><span class="line"><span class="comment">//   var str = "banana";</span></span><br><span class="line"><span class="comment">//   var list = str.split();</span></span><br><span class="line"><span class="comment">//   console.log(list); //["banana"]</span></span><br><span class="line"><span class="comment">//   var list1 = str.split("");</span></span><br><span class="line"><span class="comment">//   console.log(list1); //["b", "a", "n", "a", "n", "a"]</span></span><br><span class="line"><span class="comment">//   var list2 = str.split("n");</span></span><br><span class="line"><span class="comment">//   console.log(list2); //&nbsp;["ba", "a", "a"]</span></span><br><span class="line"><span class="comment">//   // 把日期 “2021-8-16” 按 ”-“ 来拆分</span></span><br><span class="line"><span class="comment">//   var str = "2021-8-16";</span></span><br><span class="line"><span class="comment">//   var list = str.split("-");</span></span><br><span class="line"><span class="comment">//   console.log(list); //&nbsp;["2021", "8", "16"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合数组与对象</span></span><br><span class="line"><span class="keyword">var</span> list = [</span><br><span class="line">  {</span><br><span class="line">    name: <span class="string">"xiaoming"</span>,</span><br><span class="line">    age: <span class="number">2</span>,</span><br><span class="line">    sex: <span class="string">"man"</span>,</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    name: <span class="string">"xiaohong"</span>,</span><br><span class="line">    age: <span class="number">2</span>,</span><br><span class="line">    sex: <span class="string">"woman"</span>,</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    name: <span class="string">"xiaoliang"</span>,</span><br><span class="line">    age: <span class="number">2</span>,</span><br><span class="line">    sex: <span class="string">"man"</span>,</span><br><span class="line">  },</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(list[<span class="number">0</span>].name);</span><br><span class="line"><span class="built_in">console</span>.log(list[<span class="number">0</span>].sex);</span><br><span class="line"><span class="comment">//   找出所有男同学，放入一个新的数组。</span></span><br><span class="line"><span class="comment">// 1. filter</span></span><br><span class="line"><span class="keyword">var</span> newList = list.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (item.sex === <span class="string">"man"</span>) {</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br><span class="line"><span class="comment">// 2. push</span></span><br><span class="line"><span class="keyword">var</span> newList1 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) {</span><br><span class="line">  <span class="keyword">if</span> (list[i].sex === <span class="string">"man"</span>) {</span><br><span class="line">    newList1.push(list[i]);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(newList1);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 16 日 02 点 37 分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 内置对象</title>
    <url>/2021/08/16/JS%20-%20%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0">内置对象概述</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">常用的内置对象</a><ul>
<li><a href="#math-%E5%AF%B9%E8%B1%A1">Math 对象</a></li>
<li><a href="#date-%E5%AF%B9%E8%B1%A1">Date 对象</a></li>
</ul>
</li>
<li><a href="#%E8%AE%A1%E6%97%B6%E5%99%A8%E6%96%B9%E6%B3%95-setinterval">计时器方法 <code>setInterval</code></a><ul>
<li><a href="#%E4%BE%8B%E5%AD%90-%E6%AF%8F%E9%9A%94-1-%E7%A7%92%E8%BE%93%E5%87%BA%E4%B8%80%E6%AC%A1-hello-world">例子 - 每隔 1 秒输出一次 hello world</a></li>
<li><a href="#%E4%BE%8B%E5%AD%90-%E7%AE%80%E5%8D%95%E8%AE%A1%E6%97%B6%E5%99%A8%E6%AF%8F%E7%A7%92%E8%BE%93%E5%87%BA%E5%BD%93%E5%89%8D%E7%A7%92%E6%95%B0">例子 - 简单计时器，每秒输出当前秒数。</a></li>
<li><a href="#%E4%BE%8B%E5%AD%90-%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%AF%8F%E7%A7%92%E8%BE%93%E5%87%BA%E4%B8%80%E6%AC%A1">例子 - 在控制台输出当前时间，每秒输出一次。</a></li>
</ul>
</li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E5%B0%86%E8%87%AA%E5%B7%B1%E7%8F%AD%E7%BA%A7%E7%9A%84%E5%90%8C%E5%AD%A6%E6%B7%BB%E5%8A%A0%E5%88%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E6%AC%A1%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9%E4%B8%80%E5%90%8D%E5%90%8C%E5%AD%A6">1. 将自己班级的同学添加到一个数组中，每次刷新页面，随机选择一名同学。</a></li>
<li><a href="#2-%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%AF%8F%E7%A7%92%E8%BE%93%E5%87%BA%E4%B8%80%E6%AC%A1">2. 在控制台输出当前时间，每秒输出一次。</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="内置对象概述">内置对象概述</span></h2><p>JavaScript 语言中提供了一些对象，让开发人员可以使用一些现成的功能。</p>
<h2><span id="常用的内置对象">常用的内置对象</span></h2><ul>
<li><p>[Array - 数组](./js - 数组.md)</p>
</li>
<li><p>Math - 数学</p>
</li>
<li><p>Date - 日期</p>
</li>
<li><p>RegExp - 正则表达式</p>
</li>
</ul>
<h3><span id="math-对象">Math 对象</span></h3><p>常用的方法</p>
<ul>
<li><p><code>Math.floor()</code> : 向下取整</p>
<p>去掉数值类型数据的小数部分，只保留整数部分。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.floor(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">3.99</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.floor(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 3 不是四舍五入</span></span><br></pre></td></tr></tbody></table></figure>

<p>负数情况时，去掉小数部分，然后在整数部分减 1。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = -<span class="number">3.99</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.floor(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// -4</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>Math.random()</code> : 获取 0~1 之间的随机数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>Math.abs()</code> : 绝对值</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = -<span class="number">3.99</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.abs(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 3.99</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>Math.sqrt()</code> : 开方</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.sqrt(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.sqrt(number);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>Math.pow()</code> : 乘方</p>
<p><code>Math.pow(m,n)</code>中 m 底数，n 次方</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.pow(number, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 16 2^4</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4><span id="获取指定范围的随机数">获取指定范围的随机数</span></h4><h5><span id="例子-如何获取-1-10-的随机数">例子 - 如何获取 1-10 的随机数？</span></h5><p>首先获取一个 0~1 的随机数，<code>Math.random()</code>。</p>
<p>然后乘以 10，即 0~10，<code>Math.random() * 10</code>。</p>
<p>又因为要从 1 开始，所以要再加 1，即 1~11，<code>Math.random() * 10 + 1</code>。</p>
<p>但因为要的是整数，所以要向下取整，这样就不用担心会出现大于 10 的整数，<code>Math.floor(Math.random() * 10 + 1)</code>。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br></pre></td></tr></tbody></table></figure>

<p>扩展成一个公式 <strong>Math.floor(Math.random() * X + Y)</strong></p>
<p>X 指的是想取到 x 的随机数，y 指的是从 y 开始，不设时默认为 0</p>
<p>例如随机获取星期 1~7,即 1~7 的整数</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span> + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br></pre></td></tr></tbody></table></figure>

<h5><span id="例子-针对下面的成员列表随机选择一个人在控制台输出">例子 - 针对下面的成员列表，随机选择一个人在控制台输出。</span></h5><p>让随机数设成下标。</p>
<p>5 个超级英雄，他们的索引——0，1，2，3，4，即要生成 0~5 之间的随机数,因为要向下取整，所以要 4+1。</p>
<p>因为数组的长度可能会变，所以要生成 0 ~ <code>list.length</code>之间的随机数。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"钢铁侠"</span>, <span class="string">"绿巨人"</span>, <span class="string">"美国队长"</span>, <span class="string">"蜘蛛侠"</span>, <span class="string">"雷神"</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * list.length);</span><br><span class="line"><span class="built_in">console</span>.log(list[index]);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="date-对象">Date 对象</span></h3><p><code>var d = new Date();</code></p>
<p>Date() 不设参数时就是显示当前的星期 月 日 年 时：分：秒 时区</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// Mon Aug 16 2021 16:05:27 GMT+0800 (香港标准时间)</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>var d_target = new Date("2021-1-1");</code></p>
<p>自己设置时间</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-1-1 12:00:30"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d1); <span class="comment">// Fri Jan 01 2021 12:00:30 GMT+0800 (香港标准时间)</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>d.getFullYear();</code></p>
<p>获取年份</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> year = d.getFullYear(); <span class="comment">//获取年份</span></span><br><span class="line"><span class="built_in">console</span>.log(year); <span class="comment">// 2021</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>d.getMonth();</code></p>
<p>获取月份</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> month = d.getMonth();</span><br><span class="line"><span class="built_in">console</span>.log(month); <span class="comment">// 7 实际上现在是8月 因为获取的月份是从0开始的 1月是0</span></span><br></pre></td></tr></tbody></table></figure>

<p>自己设置时间，2021 年 1 月 1 日，1 月是 0</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-1-1"</span>);</span><br><span class="line"><span class="keyword">var</span> month = d1.getMonth();</span><br><span class="line"><span class="built_in">console</span>.log(month); <span class="comment">// 0 1月是0</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>d.getDate();</code></p>
<p>获取日期</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = d.getDate(); <span class="comment">//获取日期</span></span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></tbody></table></figure>

<p><code>d.getHours();</code></p>
<p>获取小时</p>
<p><code>d.getMinutes();</code></p>
<p>获取分钟</p>
<p><code>d.getSeconds();</code></p>
<p>获取秒数</p>
<p>``d.getTime(); `</p>
<p>获取时间戳。<strong>时间戳是指格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总毫秒数。</strong></p>
<p>应用场景：可用于计算时间的差值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = d.getTime();</span><br><span class="line"><span class="built_in">console</span>.log(time); <span class="comment">// 1629102337282</span></span><br></pre></td></tr></tbody></table></figure>

<h4><span id="例子-打印显示当前时间">例子 - 打印显示当前时间</span></h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> hours = d.getHours(); <span class="comment">//获取小时</span></span><br><span class="line"><span class="keyword">var</span> minutes = d.getMinutes(); <span class="comment">//获取分钟</span></span><br><span class="line"><span class="keyword">var</span> seconds = d.getSeconds(); <span class="comment">//获取秒钟</span></span><br><span class="line"><span class="built_in">console</span>.log(hours + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds); <span class="comment">//打印显示当前时间</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="计时器方法-setinterval">计时器方法 <code>setInterval</code></span></h2><p><code>setInterval(function(){},ms);</code></p>
<p>第一个参数：可以把一个函数作为一个参数传递给第一个参数。</p>
<p>第二个参数：毫秒数。</p>
<p>每隔 1 毫秒数调用一次函数。</p>
<h3><span id="例子-每隔-1-秒输出一次-hello-world">例子 - 每隔 1 秒输出一次 hello world</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-简单计时器每秒输出当前秒数">例子 - 简单计时器，每秒输出当前秒数。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(n++);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="例子-在控制台输出当前时间每秒输出一次">例子 - 在控制台输出当前时间，每秒输出一次。</span></h3><p>正确代码。每一次都获取的时候才能改变控制台输出的时间。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="comment">//   每一次都获取的时候才能改变控制台输出的时间</span></span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> hours = d.getHours();</span><br><span class="line">  <span class="keyword">var</span> minutes = d.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> seconds = d.getSeconds();</span><br><span class="line">  <span class="built_in">console</span>.log(hours + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>错误代码，只会一直输出那时的时间。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> hours = d.getHours();</span><br><span class="line"><span class="keyword">var</span> minutes = d.getMinutes();</span><br><span class="line"><span class="keyword">var</span> seconds = d.getSeconds();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(hours + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-将自己班级的同学添加到一个数组中每次刷新页面随机选择一名同学">1. 将自己班级的同学添加到一个数组中，每次刷新页面，随机选择一名同学。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">"小红"</span>, <span class="string">"小明"</span>, <span class="string">"小亮"</span>, <span class="string">"小李"</span>, <span class="string">"小孙"</span>];</span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * list.length);</span><br><span class="line"><span class="built_in">console</span>.log(list[index]);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-在控制台输出当前时间每秒输出一次">2. 在控制台输出当前时间，每秒输出一次。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> hours = nowTime.getHours();</span><br><span class="line">  <span class="keyword">var</span> minutes = nowTime.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> seconds = nowTime.getSeconds();</span><br><span class="line">  <span class="built_in">console</span>.log(hours + <span class="string">":"</span> + minutes + <span class="string">":"</span> + seconds);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 16 日 17 点 38 分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - ES2015基础</title>
    <url>/2021/08/19/JS%20-%20ES2015%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li><a href="#ecmascipt">ECMAScipt</a></li>
<li><a href="#es2015-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">ES2015 基础语法</a><ul>
<li><a href="#%E5%8F%98%E9%87%8F">变量</a></li>
<li><a href="#%E5%B8%B8%E9%87%8F">常量</a></li>
<li><a href="#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2">模板字符串</a></li>
<li><a href="#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC">解构赋值</a></li>
</ul>
</li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="ecmascipt">ECMAScipt</span></h2><p>ECMAScipt 简称 ES。</p>
<p>简单的理解就是用 ES 表示 JS 的版本。</p>
<p>例如，Java8、Java9，说的就是 Java SE 的版本；Python2、Python3，说的就是 Python 的版本。</p>
<p>ES2015(ES6)是一个跨越性很大的一个版本。</p>
<h2><span id="es2015-基础语法">ES2015 基础语法</span></h2><h3><span id="变量">变量</span></h3><ol>
<li><p>使用 <code>let </code>代替 <code>var</code>。</p>
</li>
<li><p>块级作用域。</p>
</li>
<li><p>不存在变量提升。</p>
<p><code>var </code>存在变量提升。</p>
</li>
<li><p>不允许重复声明。</p>
</li>
</ol>
<p>总之，让变量更加规范。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//var str = "Hello World";</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="常量">常量</span></h3><ol>
<li><p><code>const </code>定义常量。</p>
</li>
<li><p>定义之后不可以修改。</p>
</li>
<li><p>不变的值用常量声明。</p>
</li>
<li><p>函数表达式可以使用常量。</p>
<p>函数表达式常用<code>const</code>来定义。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">};</span><br><span class="line">fun1();</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>对象声明可以使用常量。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObject</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> {<span class="attr">name</span>:<span class="string">"xiaoming"</span>};</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> xm = getObject();。</span><br><span class="line">xm.name = <span class="string">"xiaohong"</span>;<span class="comment">//虽然是常量，但是对象的属性可以改变。</span></span><br><span class="line"><span class="built_in">console</span>.log(xm);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引入外部模块使用常量。</p>
</li>
</ol>
<h3><span id="模板字符串">模板字符串</span></h3><p>反引号 <code>``</code></p>
<ol>
<li>支持换行。<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`hello </span></span><br><span class="line"><span class="string"> world`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//hello</span></span><br><span class="line"><span class="comment">//                     world</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>支持嵌入变量。<br><code>${}</code><br>连接字符串<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> year = <span class="string">"2020"</span>;</span><br><span class="line"><span class="keyword">let</span> month = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">let</span> date = <span class="string">"10"</span>;</span><br><span class="line"><span class="comment">//2020年10月10日</span></span><br><span class="line"><span class="comment">// let result = year + "年" + month + "月" + date + "日";</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">${year}</span>年<span class="subst">${month}</span>月<span class="subst">${date}</span>日`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3><span id="解构赋值">解构赋值</span></h3><ol>
<li>数组的解构赋值。<br><code>[n,m]</code></li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//   let n = 10;</span></span><br><span class="line"><span class="comment">//   let m = 20;</span></span><br><span class="line"><span class="keyword">let</span> [n, m] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><strong>例子 - 交换。让 n=20,m=10。</strong><br>定义一个临时变量，先把 n 放到 temp 里，再把 m 赋值给 n,最后再把 temp 赋值给 n。</p>
<ul>
<li>方法一</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> temp;</span><br><span class="line">temp = n;</span><br><span class="line">n = m;</span><br><span class="line">m = temp;</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>方法二（解构赋值）</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">20</span>;</span><br><span class="line">[n, m] = [m, n];</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ol start="2">
<li><p>对象的结构赋值（常用）。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//   let name = "xiaoming";</span></span><br><span class="line"><span class="comment">//   let age = 10;</span></span><br><span class="line"><span class="keyword">let</span> { name, age } = { <span class="attr">name</span>: <span class="string">"xiaoming"</span>, <span class="attr">age</span>: <span class="number">10</span> };</span><br><span class="line"><span class="comment">//   let { age, name } = { name: "xiaoming", age: 10 }; //不会影响数据</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// xiaoming</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xm = { <span class="attr">name</span>: <span class="string">"xiaoming"</span>, <span class="attr">age</span>: <span class="number">10</span> };</span><br><span class="line"><span class="comment">//   function getName(obj) {</span></span><br><span class="line"><span class="comment">//     return obj.name;</span></span><br><span class="line"><span class="comment">//   }</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">{ name }</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result = getName(xm);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>通过解构赋值传递参数。</p>
</li>
</ol>
<h2><span id="字符串">字符串</span></h2><p>可以用 <code>""</code> 或者 <code>''</code> 来定义，但最好要统一。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello "world"'</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'hello "world"'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// hello "world"</span></span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// hello "world"</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><ol>
<li>熟练使用本节讲解的基础语法。</li>
</ol>
<blockquote>
<p>以上内容编写于2021年8月19日01点12分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 正则表达式</title>
    <url>/2021/08/18/JS%20-%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a></li>
<li><a href="#%E5%9C%A8-js-%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%B9%E8%B1%A1">在 JS 中创建正则表达式对象</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-1">正则表达式</a><ul>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95">正则表达式的语法</a></li>
</ul>
</li>
<li><a href="#%E4%BE%8B-1%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1%E6%A0%BC%E5%BC%8F">例 1：验证邮箱格式</a></li>
<li><a href="#%E4%BE%8B-2%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2">例 2：截取字符串</a></li>
<li><a href="#%E4%BE%8B-3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2">例 3：字符串替换</a></li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E7%BC%96%E5%86%99%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E4%BA%8E%E9%AA%8C%E8%AF%81%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81">1. 编写正则表达式，用于验证电话号码。</a></li>
<li><a href="#2-%E7%BC%96%E5%86%99%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E4%BA%8E%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1%E6%A0%BC%E5%BC%8F">2. 编写正则表达式，用于验证邮箱格式。</a></li>
</ul>
</li>
<li><a href="#%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD">实际开发中…</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E8%BD%BD">常用正则表达式（转载）</a><ul>
<li><a href="#%E4%B8%80-%E6%A0%A1%E9%AA%8C%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F">一、校验数字的表达式</a></li>
<li><a href="#%E4%BA%8C-%E6%A0%A1%E9%AA%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F">二、校验字符的表达式</a></li>
<li><a href="#%E4%B8%89-%E7%89%B9%E6%AE%8A%E9%9C%80%E6%B1%82%E8%A1%A8%E8%BE%BE%E5%BC%8F">三、特殊需求表达式</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="正则表达式">正则表达式</span></h2><p>正则表达式可以用来匹配字符串。</p>
<p>通过正则表达式，可以实现字符串的截取或按规则替换和验证字符串内容。</p>
<p>正则表达式独立于语言，很多语言都支持正则表达式。（并非 JavaScript 特性）。</p>
<h2><span id="在-js-中创建正则表达式对象">在 JS 中创建正则表达式对象</span></h2><p><em><code>//</code>中间不写内容就是注释，<code>/.../</code>就是正则表达式。</em></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"123"</span>);</span><br><span class="line"><span class="comment">//第二种方法 简写</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>类似于数组</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = [];</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="正则表达式">正则表达式</span></h2><h3><span id="正则表达式的语法">正则表达式的语法</span></h3><ul>
<li><p><code>^</code>：开头</p>
</li>
<li><p><code>$</code>：结尾</p>
<p><code>^</code>规定开头，<code>$</code> 规定结尾 ，如这个就是第一位只能是字母，因为字符串的第一位是 1，所以匹配失败。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>[]</code>：范围</p>
<p>[a-z]：小写字母、[0-9]：数字、[A-Z]：大写字母。</p>
<p><code>[]</code>范围 要加范围直接在括号里加</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"s"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>{}</code> ：位数</p>
<p><code>/^[a-z]{3}$/</code> 表示要三位都是字母，多了不行，少了也不行。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]{3}$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]{3}$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>()</code> ：分组</p>
<p>如，截取字符串</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"2021-2-1"</span>;</span><br><span class="line"><span class="comment">// `()` 分组</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d{4})-(\d{1,2})-(\d{1,2})$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// ["2019-12-01", "2019", "12", "01", index: 0, input: "2019-12-01", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]); <span class="comment">// 2019</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">2</span>]); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">3</span>]); <span class="comment">// 01</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>+</code> ：匹配 1 位或多位，同<code>{1,}</code></p>
<p><code>{x,y}</code> {5,8}：只能 5~8 位之间。<code>{1，}</code> = <code>+</code>：1 到多位。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"testabcd"</span>; <span class="comment">//7位</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]{5,8}$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>?</code> ：0 位或 1 位，同<code>{0,1}</code></p>
<p><code>?</code>代表 0 位或 1 位 ， <code>?</code> = <code>{0,1}</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d?$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"11"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d?$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//0位</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>; <span class="comment">//空字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d?$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>.</code> ：匹配所有</p>
<p><code>.</code> 匹配所有 随便写什么都行别留空就行。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>; <span class="comment">//空字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^.+$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"312FASFAasdsad2312——"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^.+$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>\</code> ：转义</p>
<p><code>\</code>转义符 要想匹配得到就要转义</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1+"</span>;</span><br><span class="line"><span class="comment">// `\`转义符</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1\+$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1+"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1+$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>\d</code> ：数字</p>
<p><code>[0-9]</code> = <code>\d</code></p>
</li>
<li><p><code>\w</code> ：数字、字母、下划线</p>
<p><code>[a-z 0-9 A-Z _]</code> = <code>\w</code></p>
<p><code>[a-z 0-9 A-Z _]</code>：只能输入 0~9 的数字、a~z 小写字母、A~Z 大写字母或者下划线</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"teSta1_d"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z 0-9 A-Z _]{5,8}$/</span>;</span><br><span class="line"><span class="comment">//var reg = /^\w{5,8}$/;</span></span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>\s</code> ：空格或换行</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">" "</span>; <span class="comment">//空格</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\s$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"  "</span>; <span class="comment">//空格</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\s+$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>g</code></p>
<p>全局匹配，找到所有能匹配到的内容。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123abc456def"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-zA-z]/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.replace(reg, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 123456</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>reg.test()</code></p>
<p>用于检测字符串和正则表达式匹配成功。<code>reg.test()</code>返回值是布尔值 true/false。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//假设是用户输入的字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">//正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true 匹配成功</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"456"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//false 失败</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>reg.exec()</code></p>
<p>显示匹配的内容。<code>reg.exec()</code>返回值是匹配的内容。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"s"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//["s", index: 0, input: "s", groups: undefined]</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2><span id="例-1验证邮箱格式">例 1：验证邮箱格式</span></h2><p><code>\w</code> ：数字、字母、下划线； <code>{5,12}</code>：5 位到 12 位</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"xiaozhou@163.com"</span>;</span><br><span class="line"><span class="comment">// 规定邮箱格式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w{5,12}@163\.com$/</span>;</span><br><span class="line"><span class="comment">// reg.test返回的是布尔值 true/false。因此可以用if语句判断是否通过。</span></span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"OK!!!"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"SORRY..."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="例-2截取字符串">例 2：截取字符串</span></h2><p>字符串 “2021-01-01”，可以将其数字部分截取出来。<code>()</code> 分组</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"2021-2-1"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d{4})-(\d{1,2})-(\d{1,2})$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// ["2019-12-01", "2019", "12", "01", index: 0, input: "2019-12-01", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]); <span class="comment">// 2019</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">2</span>]); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">3</span>]); <span class="comment">// 01</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="例-3字符串替换">例 3：字符串替换</span></h2><p>去掉字符串中的字母，把字符串中的某个内容替换成某个内容。</p>
<p>如，“123a456b789c”，去掉字符串中的所有字母（ <code>str.replace</code> )。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123abc456def"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-zA-z]/g</span>; <span class="comment">//全局匹配 找到所有能匹配到的内容</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(reg, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 123456</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-编写正则表达式用于验证电话号码">1. 编写正则表达式，用于验证电话号码。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> phoneNumber = <span class="string">"18503084396"</span>;</span><br><span class="line"><span class="keyword">var</span> reg =</span><br><span class="line">  /^(<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\d{<span class="number">8</span>}$/;</span><br><span class="line"><span class="keyword">if</span> (reg.test(phoneNumber)) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"OK!!!"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"SORRY..."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-编写正则表达式用于验证邮箱格式">2. 编写正则表达式，用于验证邮箱格式。</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EmailAddress = <span class="string">"xiaozhou123@126.com"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(EmailAddress)) {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"OK!!!"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"SORRY..."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2><span id="实际开发中">实际开发中…</span></h2><p>大部分情况下，是不需要我们自己写正则表达式的。</p>
<p>邮箱或电话的验证方式：有很多现成的解决方案。</p>
<p>截取和替换数据，掌握一些常用语法即可。</p>
<blockquote>
<p>以上内容编写于2021年8月18日02点10分。</p>
</blockquote>
<h2><span id="常用正则表达式转载">常用正则表达式（转载）</span></h2><h3><span id="一-校验数字的表达式">一、校验数字的表达式</span></h3><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">数字：^[0-9]*$</span><br><span class="line">n 位的数字：^<span class="symbol">\d</span>{n}$</span><br><span class="line">至少 n 位的数字：^<span class="symbol">\d</span>{n,}$</span><br><span class="line">m-n 位的数字：^<span class="symbol">\d</span>{m,n}$</span><br><span class="line">零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(<span class="symbol">\.</span>[0-9]{1,2})?$</span><br><span class="line">带 1-2 位小数的正数或负数：^(<span class="symbol">\-</span>)?<span class="symbol">\d</span>+(<span class="symbol">\.</span><span class="symbol">\d</span>{1,2})$</span><br><span class="line">正数、负数、和小数：^(<span class="symbol">\-</span>|<span class="symbol">\+</span>)?<span class="symbol">\d</span>+(<span class="symbol">\.</span><span class="symbol">\d</span>+)?$</span><br><span class="line">有两位小数的正实数：^[0-9]+(<span class="symbol">\.</span>[0-9]{2})?$</span><br><span class="line">有 1~3 位小数的正实数：^[0-9]+(<span class="symbol">\.</span>[0-9]{1,3})?$</span><br><span class="line">非零的正整数：^[1-9]<span class="symbol">\d</span>*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^<span class="symbol">\+</span>?[1-9][0-9]*$</span><br><span class="line">非零的负整数：^<span class="symbol">\-</span>[1-9][] 0-9"*$ 或 ^-[1-9]<span class="symbol">\d</span>*$</span><br><span class="line">非负整数：^<span class="symbol">\d</span>+$ 或 ^[1-9]<span class="symbol">\d</span>*|0$</span><br><span class="line">非正整数：^-[1-9]<span class="symbol">\d</span>*|0$ 或 ^((-<span class="symbol">\d</span>+)|(0+))$</span><br><span class="line">非负浮点数：^<span class="symbol">\d</span>+(<span class="symbol">\.</span><span class="symbol">\d</span>+)?$ 或 ^[1-9]<span class="symbol">\d</span>*<span class="symbol">\.</span><span class="symbol">\d</span>*|0<span class="symbol">\.</span><span class="symbol">\d</span>*[1-9]<span class="symbol">\d</span>*|0?<span class="symbol">\.</span>0+|0$</span><br><span class="line">非正浮点数：^((-<span class="symbol">\d</span>+(<span class="symbol">\.</span><span class="symbol">\d</span>+)?)|(0+(<span class="symbol">\.</span>0+)?))$ 或 ^(-([1-9]<span class="symbol">\d</span>*<span class="symbol">\.</span><span class="symbol">\d</span>*|0<span class="symbol">\.</span><span class="symbol">\d</span>*[1-9]<span class="symbol">\d</span>*))|0?<span class="symbol">\.</span>0+|0$</span><br><span class="line">正浮点数：^[1-9]<span class="symbol">\d</span>*<span class="symbol">\.</span><span class="symbol">\d</span>*|0<span class="symbol">\.</span><span class="symbol">\d</span>*[1-9]<span class="symbol">\d</span>*$ 或 ^(([0-9]+<span class="symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">负浮点数：^-([1-9]<span class="symbol">\d</span>*<span class="symbol">\.</span><span class="symbol">\d</span>*|0<span class="symbol">\.</span><span class="symbol">\d</span>*[1-9]<span class="symbol">\d</span>*)$ 或 ^(-(([0-9]+<span class="symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">浮点数：^(-?<span class="symbol">\d</span>+)(<span class="symbol">\.</span><span class="symbol">\d</span>+)?$ 或 ^-?([1-9]<span class="symbol">\d</span>*<span class="symbol">\.</span><span class="symbol">\d</span>*|0<span class="symbol">\.</span><span class="symbol">\d</span>*[1-9]<span class="symbol">\d</span>*|0?<span class="symbol">\.</span>0+|0)$</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="二-校验字符的表达式">二、校验字符的表达式</span></h3><figure class="highlight elixir"><table><tbody><tr><td class="code"><pre><span class="line">汉字：^[\u4e00-\u9fa5]{0,}$</span><br><span class="line">英文和数字：^[A-Za-z0<span class="number">-9</span>]+<span class="variable">$ </span>或 ^[A-Za-z0<span class="number">-9</span>]{<span class="number">4</span>,<span class="number">40</span>}$</span><br><span class="line">长度为 <span class="number">3</span><span class="number">-20</span> 的所有字符：^.{<span class="number">3</span>,<span class="number">20</span>}$</span><br><span class="line">由 <span class="number">26</span> 个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">由 <span class="number">26</span> 个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">由 <span class="number">26</span> 个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">由数字和 <span class="number">26</span> 个英文字母组成的字符串：^[A-Za-z0<span class="number">-9</span>]+$</span><br><span class="line">由数字、<span class="number">26</span> 个英文字母或者下划线组成的字符串：^\w+<span class="variable">$ </span>或 ^\w {<span class="number">3</span>,<span class="number">20</span>}$</span><br><span class="line">中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9_</span>]+$</span><br><span class="line">中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]+<span class="variable">$ </span>或 ^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]{<span class="number">2</span>,<span class="number">20</span>}$</span><br><span class="line">可以输入含有 ^%&amp;<span class="string">',;=?$\" 等字符：[^%&amp;'</span>,;=?<span class="variable">$\</span>x22]+</span><br><span class="line">禁止输入含有～的字符：[^~\x22]+</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="三-特殊需求表达式">三、特殊需求表达式</span></h3><figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">Email 地址：^\w+(<span class="comment">[-+.]</span>\w+)*@\w+(<span class="comment">[-.]</span>\w+)*\.\w+(<span class="comment">[-.]</span>\w+)*$</span><br><span class="line">域名：<span class="comment">[a-zA-Z0-9]</span><span class="comment">[-a-zA-Z0-9]</span>{0,62}(\.<span class="comment">[a-zA-Z0-9]</span><span class="comment">[-a-zA-Z0-9]</span>{0,62})+\.?</span><br><span class="line">InternetURL：<span class="comment">[a-zA-z]</span>+://<span class="comment">[^\s]</span>* 或 ^http://(<span class="comment">[\w-]</span>+\.)+<span class="comment">[\w-]</span>+(/<span class="comment">[\w-./?%&amp;=]</span>*)?$</span><br><span class="line">手机号码：^(13<span class="comment">[0-9]</span>|14<span class="comment">[5|7]</span>|15<span class="comment">[0|1|2|3|4|5|6|7|8|9]</span>|18<span class="comment">[0|1|2|3|5|6|7|8|9]</span>)\d{8}$</span><br><span class="line">电话号码 (<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXXX-XXXXXXXX"</span>、<span class="string">"XXX-XXXXXXX"</span>、<span class="string">"XXX-XXXXXXXX"</span>、<span class="string">"XXXXXXX"</span> 和 <span class="string">"XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</span></span><br><span class="line"><span class="string">国内电话号码 (0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</span></span><br><span class="line"><span class="string">电话号码正则表达式（支持手机号码，3-4 位区号，7-8 位直播号码，1－4 位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</span></span><br><span class="line"><span class="string">身份证号 (15 位、18 位数字)，最后一位是校验位，可能为数字或字符 X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</span></span><br><span class="line"><span class="string">帐号是否合法 (字母开头，允许 5-16 字节，允许字母数字下划线)：^<span class="subst">[a-zA-Z]</span><span class="subst">[a-zA-Z0-9_]</span>{4,15}$</span></span><br><span class="line"><span class="string">密码 (以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线)：^<span class="subst">[a-zA-Z]</span>\w{5,17}$</span></span><br><span class="line"><span class="string">强密码 (必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\d)(?=.*<span class="subst">[a-z]</span>)(?=.*<span class="subst">[A-Z]</span>)<span class="subst">[a-zA-Z0-9]</span>{8,10}$</span></span><br><span class="line"><span class="string">强密码 (必须包含大小写字母和数字的组合，可以使用特殊字符，长度在 8-10 之间)：^(?=.*\d)(?=.*<span class="subst">[a-z]</span>)(?=.*<span class="subst">[A-Z]</span>).{8,10}$</span></span><br><span class="line"><span class="string">日期格式：^\d{4}-\d{1,2}-\d{1,2}</span></span><br><span class="line"><span class="string">一年的 12 个月 (01～09 和 1～12)：^(0?<span class="subst">[1-9]</span>|1<span class="subst">[0-2]</span>)$</span></span><br><span class="line"><span class="string">一个月的 31 天 (01～09 和 1～31)：^((0?<span class="subst">[1-9]</span>)|((1|2)<span class="subst">[0-9]</span>)|30|31)$</span></span><br><span class="line"><span class="string">钱的输入格式：</span></span><br><span class="line"><span class="string">有四种钱的表示形式我们可以接受:"</span>10000.00<span class="string">" 和 "</span>10,000.00<span class="string">", 和没有 "</span>分<span class="string">" 的 "</span>10000<span class="string">" 和 "</span>10,000<span class="string">"：^<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*$</span></span><br><span class="line"><span class="string">这表示任意一个不以 0 开头的数字，但是，这也意味着一个字符 "</span>0<span class="string">" 不通过，所以我们采用下面的形式：^(0|<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*)$</span></span><br><span class="line"><span class="string">一个 0 或者一个不以 0 开头的数字。我们还可以允许开头有一个负号：^(0|-?<span class="subst">[1-9]</span><span class="subst">[0-9]</span>*)$</span></span><br><span class="line"><span class="string">这表示一个 0 或者一个可能为负的开头不为 0 的数字。让用户以 0 开头好了。把负号的也去掉，因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^<span class="subst">[0-9]</span>+(.<span class="subst">[0-9]</span>+)?$</span></span><br><span class="line"><span class="string">必须说明的是，小数点后面至少应该有 1 位数，所以 "</span>10.<span class="string">" 是不通过的，但是 "</span>10<span class="string">" 和 "</span>10.2<span class="string">" 是通过的：^<span class="subst">[0-9]</span>+(.<span class="subst">[0-9]</span>{2})?$</span></span><br><span class="line"><span class="string">这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样：^<span class="subst">[0-9]</span>+(.<span class="subst">[0-9]</span>{1,2})?$</span></span><br><span class="line"><span class="string">这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样：^<span class="subst">[0-9]</span>{1,3}(,<span class="subst">[0-9]</span>{3})*(.<span class="subst">[0-9]</span>{1,2})?$</span></span><br><span class="line"><span class="string">1 到 3 个数字，后面跟着任意个 逗号 + 3 个数字，逗号成为可选，而不是必须：^(<span class="subst">[0-9]</span>+|<span class="subst">[0-9]</span>{1,3}(,<span class="subst">[0-9]</span>{3})*)(.<span class="subst">[0-9]</span>{1,2})?$</span></span><br><span class="line"><span class="string">备注：这就是最终结果了，别忘了 "</span>+<span class="string">" 可以用 "</span>*<span class="string">" 替代如果你觉得空字符串也可以接受的话 (奇怪，为什么？) 最后，别忘了在用函数时去掉去掉那个反斜杠，一般的错误都在这里</span></span><br><span class="line"><span class="string">xml 文件：^(<span class="subst">[a-zA-Z]</span>+-?)+<span class="subst">[a-zA-Z0-9]</span>+\\.<span class="subst">[x|X]</span><span class="subst">[m|M]</span><span class="subst">[l|L]</span>$</span></span><br><span class="line"><span class="string">中文字符的正则表达式：<span class="subst">[\u4e00-\u9fa5]</span></span></span><br><span class="line"><span class="string">双字节字符：<span class="subst">[^\x00-\xff]</span> (包括汉字在内，可以用来计算字符串的长度 (一个双字节字符长度计 2，ASCII 字符计 1))</span></span><br><span class="line"><span class="string">空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span></span><br><span class="line"><span class="string">HTML 标记的正则表达式：&lt;(\S*?)<span class="subst">[^&gt;]</span>*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$ 或 (^\s*)|(\s*$) (可以用来删除行首行尾的空白字符 (包括空格、制表符、换页符等等)，非常有用的表达式)</span></span><br><span class="line"><span class="string">腾讯 QQ 号：<span class="subst">[1-9]</span><span class="subst">[0-9]</span>{4,} (腾讯 QQ 号从 10000 开始)</span></span><br><span class="line"><span class="string">中国邮政编码：<span class="subst">[1-9]</span>\d {5}(?!\d) (中国邮政编码为 6 位数字)</span></span><br><span class="line"><span class="string">IPv4 地址：((2(5<span class="subst">[0-5]</span>|<span class="subst">[0-4]</span>\d))|<span class="subst">[0-1]</span>?\d{1,2})(\.((2(5<span class="subst">[0-5]</span>|<span class="subst">[0-4]</span>\d))|<span class="subst">[0-1]</span>?\d{1,2})){3}</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 函数进阶</title>
    <url>/2021/08/25/JS%20-%20%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%A4%8D%E4%B9%A0%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9">复习函数知识点</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6">函数进阶</a><ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%80%BC">设置默认参数值</a></li>
<li><a href="#%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0">立即执行函数</a></li>
<li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">作用域链</a></li>
<li><a href="#%E9%97%AD%E5%8C%85">闭包</a></li>
<li><a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a></li>
</ul>
</li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a></li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="复习函数知识点">复习函数知识点</span></h2><ol>
<li><p>声明函数</p>
<ul>
<li>一次声明，多次使用的语句块。</li>
<li>参数：形参、实参。</li>
<li>返回值：函数运行的结果。</li>
</ul>
</li>
<li><p>函数声明提升</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, m</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result1 = fun(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> result2 = fun(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"><span class="comment">// 函数声明提升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, m</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>匿名函数<br>一个函数如果不需要多次调用那么可以写成匿名函数。<br>例如 <code>setInterval</code> 的匿名函数。<br><code>setInterval</code> 这种函数又叫回调函数，将匿名函数作为参数传递给另外一个函数或方法。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">}, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">setInterval</span>(fun, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>函数表达式</p>
<p>函数表达式没有函数声明提升的特性。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> result = fun(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 30</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>方法：属于某一对象的函数。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="comment">// sayName: function(){</span></span><br><span class="line">  <span class="comment">//     console.log(this.name);</span></span><br><span class="line">  <span class="comment">// }</span></span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>以上内容编写于 2021 年 8 月 20 日 02 点 04 分。</p>
</blockquote>
<h2><span id="函数进阶">函数进阶</span></h2><ol>
<li>设置默认参数值</li>
<li>立即执行函数</li>
<li>闭包</li>
<li>箭头函数</li>
</ol>
<h3><span id="设置默认参数值">设置默认参数值</span></h3><p>ES2015 的语法可以为函数的参数设置默认值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">x = <span class="number">10</span>, y = <span class="number">20</span></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>例如</p>
<ul>
<li><p>未传递参数和未设置默认参数值时</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, m</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// undefind</span></span><br><span class="line">  <span class="built_in">console</span>.log(m); <span class="comment">// undefind</span></span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result = fun();</span><br><span class="line"><span class="comment">// NaN: not a Number</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// NaN</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>未传递参数但设置默认参数值时</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n = <span class="number">100</span>, m = <span class="number">200</span></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(m); <span class="comment">// 200</span></span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result = fun();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 300</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>传递参数也设置默认参数值时</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n = <span class="number">100</span>, m = <span class="number">200</span></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 10</span></span><br><span class="line">  <span class="built_in">console</span>.log(m); <span class="comment">// 200</span></span><br><span class="line">  <span class="keyword">return</span> n + m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result1 = fun(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result1); <span class="comment">// 210</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3><span id="立即执行函数">立即执行函数</span></h3><p>功能：封装代码。</p>
<ul>
<li>声明之后可以直接调用；</li>
<li>不可以多次调用；</li>
<li>某些第三方库实现封装。</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure>

<p><em>ES2015 有模块化的语法，所以立即执行函数现在也不常用了。</em></p>
<h3><span id="作用域链">作用域链</span></h3><ul>
<li>每一个函数都会创建一个新的作用域。</li>
<li>函数外部无法访问函数内部的值。</li>
<li>函数内部的值可以访问函数外部的值。</li>
</ul>
<p><em>如果内部找不到值就去外部找。</em></p>
<h4><span id="例-1">例 1</span></h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">"world"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">}</span><br><span class="line">fun1(); <span class="comment">// world</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// hello</span></span><br></pre></td></tr></tbody></table></figure>

<h4><span id="例-2">例 2</span></h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">"world"</span>;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">10</span>; <span class="comment">//执行完成就会被销毁</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//world</span></span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">//10</span></span><br><span class="line">  }</span><br><span class="line">  fun2();</span><br><span class="line">}</span><br><span class="line">fun1(); <span class="comment">// world</span></span><br><span class="line"><span class="comment">//         10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num :"</span> + num); <span class="comment">////执行完成就会被销毁 所以会报错。</span></span><br></pre></td></tr></tbody></table></figure>

<p>例 2 的树状图</p>
<figure class="highlight gherkin"><table><tbody><tr><td class="code"><pre><span class="line">|<span class="string">-window</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">-str</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">-fun1</span></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">-str</span></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">-num</span></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">-fun2</span></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">-str</span></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">-num</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 24 日 01 点 11 分。</p>
</blockquote>
<h3><span id="闭包">闭包</span></h3><p>闭包函数：声明在一个函数中的函数，叫做闭包函数。</p>
<p>闭包：内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回之后。</p>
<p>闭包的特性： 内部函数未执行完，外部函数即使执行完成，外部函数中的变量也不会被销毁。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm fun2"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> fun2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> f = fun1(); <span class="comment">//fun1的运行结果是fun2</span></span><br></pre></td></tr></tbody></table></figure>

<p>利用闭包实现了代码的封装。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> m = <span class="number">20</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> fun2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> f = fun1(); <span class="comment">//fun1的运行结果是fun2</span></span><br><span class="line"><span class="keyword">const</span> result = f();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure>

<h4><span id="代码封装">代码封装</span></h4><p>ES5 的一个模块化的语法。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="箭头函数">箭头函数</span></h3><p>作用： 简化写法。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 再次简化</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x</span>) =&gt;</span> x * x;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">x</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="comment">//         参数   返回值</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">x</span>) =&gt;</span> x * x;</span><br></pre></td></tr></tbody></table></figure>

<h4><span id="例子-每秒输出一次名字">例子 - 每秒输出一次名字</span></h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="comment">// sayName() {</span></span><br><span class="line">  <span class="comment">//     let self = this</span></span><br><span class="line">  <span class="comment">//     setInterval(function () {</span></span><br><span class="line">  <span class="comment">//         console.log(self.name);</span></span><br><span class="line">  <span class="comment">//     }, 1000)</span></span><br><span class="line">  <span class="comment">// }</span></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">//window调用的setInterval</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure>

<p>使用 <code>function</code> 定义的函数， <code>this</code> 取决于调用的函数。</p>
<p>使用箭头函数， <code>this</code> 取决于函数定义的位置。</p>
<p>箭头函数和普通函数的<code>this</code> 指向不同。</p>
<p>普通函数指向的是调用该函数的对象。</p>
<p>箭头函数：在哪里定义，<code>this</code> 就指向谁。</p>
<h2><span id="课后练习">课后练习</span></h2><ol>
<li><p>使用箭头函数延迟调用 <code>cat.sayName</code>， 输出 cat 对象的 <code>name</code> 属性。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = {</span><br><span class="line">  name: <span class="string">"miaomiao"</span>,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">cat.sayName();</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<blockquote>
<p>以上内容编写于 2021 年 8 月 25 日 02 点 31 分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS - 面向对象</title>
    <url>/2021/09/01/JS%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0">面向对象概述</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li>
<li><a href="#%E6%96%B0%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%97%A7%E8%AF%AD%E6%B3%95">新语法与旧语法</a></li>
<li><a href="#es5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%86">ES5 面向对象的知识</a><ul>
<li><a href="#es5-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">ES5 构造函数</a></li>
<li><a href="#%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1">原型对象</a></li>
<li><a href="#%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF">原型链（继承）</a></li>
</ul>
</li>
<li><a href="#es2015-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95">ES2015 面向对象语法</a><ul>
<li><a href="#class-%E5%85%B3%E9%94%AE%E5%AD%97">Class 关键字</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
</ul>
</li>
<li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a><ul>
<li><a href="#1-%E6%89%A9%E5%B1%95-date-%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E5%A6%82%E4%B8%8B%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-dateformate-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AFxxxx-%E5%B9%B4-xx-%E6%9C%88-xx-%E6%97%A5">1. 扩展 Date 对象实现如下功能，实现 dateFormate 方法，返回值是“xxxx 年 xx 月 xx 日”；</a></li>
<li><a href="#2-%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA-person-%E7%B1%BB%E8%AE%A9-student-%E7%B1%BB%E5%92%8C-teacher-%E7%B1%BB%E7%BB%A7%E6%89%BF-person%E4%B8%BA-person-%E7%B1%BB%E6%B7%BB%E5%8A%A0-getinformation-%E6%96%B9%E6%B3%95%E4%BD%BF-student-%E7%B1%BB%E5%92%8C-teacher-%E7%B1%BB%E9%83%BD%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%AD%A4%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF">2. 定义一个 Person 类，让 Student 类和 Teacher 类继承 Person，为 Person 类添加 getInformation 方法，使 Student 类和 Teacher 类都可以通过此方法获取个人信息。</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

<span id="more"></span>

<h2><span id="面向对象概述">面向对象概述</span></h2><p>面向对象是一种编程思想，这种编程思想可以当做一个学科来研究。</p>
<p>除了 JavaScript，例如 C++、Java、Python、PHP 等等编程语言都可以使用这种面向对象的编程思想来开发应用程序。</p>
<h2><span id="基本概念">基本概念</span></h2><p>类：类型、模板、统称。（狗类、鸟类）</p>
<p>对象：是类的一个实例，会具体到某一个事物上（天上飞的那只鸟，我加的那只猫）</p>
<p>继承：狗类继承至哺乳动物类，猫类也继承至哺乳动物类，继承后，子类可以使用父类的属性和方法。</p>
<h2><span id="新语法与旧语法">新语法与旧语法</span></h2><p>ES5 面向对象语法（prototype）</p>
<p>ES6(2015) 面向对象语法</p>
<h2><span id="es5-面向对象的知识">ES5 面向对象的知识</span></h2><p>构造函数：用于创建对象的函数。</p>
<p>原型对象：prototype</p>
<p>原型链：实现继承</p>
<h3><span id="es5-构造函数">ES5 构造函数</span></h3><p>构造函数的函数名，首字母大写</p>
<p>构造函数是用来创建对象用的。</p>
<p><code>function Dog(){}</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>, <span class="number">2</span>); <span class="comment">// 创建了一个对象，狗类的实例。</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.name);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="原型对象">原型对象</span></h3><p>通过设置构造函数的<code>prototype</code>属性，可以扩展构造函数生成的对象。<br>通过原型对象，为构造函数生成的对象赋予新的方法。</p>
<p><code>Dog.prototype.sayName = function () {};</code><br><code>Array.prototype.sayHello = function () {</code><br><code>console.log(你好，我的长度是${this.length}!);</code><br><code>}</code><br><code>let arr = [1, 2, 3, 4, 5, 1, 2, 3];</code><br><code>arr.sayHello();</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我的名字是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 创建了一个对象，狗类的实例。</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> bigDog = <span class="keyword">new</span> Dog(<span class="string">"二哈"</span>, <span class="number">3</span>);</span><br><span class="line">dog.sayName();</span><br><span class="line">bigDog.sayName();</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="原型链继承">原型链（继承）</span></h3><p><code>Dog.prototype = new Animal()</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`你好，我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Animal.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>);</span><br><span class="line">dog.sayName();</span><br><span class="line">dog.sayHello();</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 8 月 31 日 0 点 30 分。</p>
</blockquote>
<h2><span id="es2015-面向对象语法">ES2015 面向对象语法</span></h2><p>ES2015 支持类的概念。</p>
<h3><span id="class-关键字">Class 关键字</span></h3><p><code>constructor </code>(ES2015 的构造函数)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>{</span><br><span class="line">  <span class="comment">//ES2015的构造函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>, <span class="number">2</span>);</span><br><span class="line">dog.sayName();</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="继承">继承</span></h3><p><code>extends </code>关键字</p>
<p><code>super</code></p>
<p>①</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// ES2015 继承 extends关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>);</span><br><span class="line">dog.sayName();</span><br></pre></td></tr></tbody></table></figure>

<p>②</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// ES2015 继承 extends关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> {</span><br><span class="line">    <span class="comment">//父级的属性 super关键字</span></span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="comment">// 子级的就用this 关键字</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺柴"</span>, <span class="number">2</span>);</span><br><span class="line">dog.sayName(); <span class="comment">//我是旺柴</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.age); <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure>

<h2><span id="课后练习">课后练习</span></h2><h3><span id="1-扩展-date-对象实现如下功能实现-dateformate-方法返回值是xxxx-年-xx-月-xx-日">1. 扩展 Date 对象实现如下功能，实现 dateFormate 方法，返回值是“xxxx 年 xx 月 xx 日”；</span></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.dateFormate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> nowYear = <span class="built_in">this</span>.getFullYear();</span><br><span class="line">  <span class="keyword">let</span> nowMonth = <span class="built_in">this</span>.getMonth();</span><br><span class="line">  <span class="keyword">let</span> nowDay = <span class="built_in">this</span>.getDate();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">${nowYear}</span>年<span class="subst">${nowMonth + <span class="number">1</span>}</span>月<span class="subst">${nowDay}</span>日`</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-9-2"</span>);</span><br><span class="line"><span class="keyword">let</span> result = nowDate.dateFormate();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure>

<h3><span id="2-定义一个-person-类让-student-类和-teacher-类继承-person为-person-类添加-getinformation-方法使-student-类和-teacher-类都可以通过此方法获取个人信息">2. 定义一个 Person 类，让 Student 类和 Teacher 类继承 Person，为 Person 类添加 getInformation 方法，使 Student 类和 Teacher 类都可以通过此方法获取个人信息。</span></h3><p>ES5</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">Person.prototype.getInformation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line">Teacher.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aMan = <span class="keyword">new</span> Person(<span class="string">"hh"</span>);</span><br><span class="line"><span class="keyword">var</span> aStu = <span class="keyword">new</span> Student(<span class="string">"szf"</span>);</span><br><span class="line"><span class="keyword">var</span> aTea = <span class="keyword">new</span> Teacher(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line">aMan.getInformation();</span><br><span class="line">aStu.getInformation();</span><br><span class="line">aTea.getInformation();</span><br></pre></td></tr></tbody></table></figure>

<p>ES2015</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="title">getInformation</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">${<span class="built_in">this</span>.name}</span>`</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> {</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> {</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="keyword">new</span> Person(<span class="string">"s"</span>);</span><br><span class="line"><span class="keyword">let</span> aStu = <span class="keyword">new</span> Student(<span class="string">"sb"</span>);</span><br><span class="line"><span class="keyword">let</span> aTea = <span class="keyword">new</span> Teacher(<span class="string">"w"</span>);</span><br><span class="line">aPerson.getInformation();</span><br><span class="line">aStu.getInformation();</span><br><span class="line">aTea.getInformation();</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>以上内容编写于 2021 年 9 月 1 日 01 点 50 分。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>前端学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
